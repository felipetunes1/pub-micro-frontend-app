{
   "a": "<routes xmlns=\"http://camel.apache.org/schema/spring\">\n<route id=\"steps\">\n<from uri=\"direct:steps\" />\n<filter>\n    <simple>${header.x-trace-id} == null</simple>\n    <setHeader name=\"x-trace-id\">\n\n <simple>${bean:uuid.generate}</simple>\n    </setHeader>\n</filter>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:restrictionAndDate</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:generateMainBroker</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:checkEntriesAndEnrich</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:generateMainVehicleDueQuotation</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:dataClassificationAndRns</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:neurotech</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:bestOfferRoute</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:adjustCoverage</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:calculationOrchestrator</constant>\n</enrich>\n<enrich strategyMethodName=\"aggregate\" strategyRef=\"contentEnricheStrategy\">\n    <constant>direct:paymentMethods</constant>\n</enrich>\n<to uri=\"direct:responseOffer\" />   </route>   <route streamCache=\"false\" id=\"restrictionsBlackList\">\n<from uri=\"direct:restrictionsBlackList\" />\n<setHeader name=\"stepName\">\n    <constant>restrictionsBlackList</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>1</constant>\n</setHeader>\n<!-- headers -->\n<setHeader name=\"CamelHttpMethod\">\n    <constant>POST</constant>\n</setHeader>\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}</simple>\n</setHeader>\n<setHeader name=\"id\">\n    <simple>5ebd50816adbee3ca9cb91e6</simple>\n</setHeader>\n<setHeader name=\"Content-Type\">\n    <constant>application/json;charset=UTF-8</constant>\n</setHeader>\n<doTry>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]: body beforeJslt = ${body}\" />\n    <setProperty name=\"compositionId\">\n\n <jsonpath>$.request.body.search..segment..compositions.id</jsonpath>\n    </setProperty>\n    <setHeader id=\"BodyJSLTRBL\" name=\"CamelJsltString\">\n\n <simple>\n\n     def criarSegment(value)\n\n     if(\"${exchangeProperty[compositionId]}\" == \"\")\n\n     {\n\n     \"segment\": [\n\n     {\n\n     \"components\": [\n\n     {\n\n     \"compositions\": [\n\n     {\n\n     \"id\": 9\n\n     }\n\n     ]\n\n     }\n\n     ]\n\n     }\n\n     ],\n\n     \"businessItem\": $value.businessItem\n\n     }\n\n     else\n\n     { \"segment\" : $value.segment, \"businessItem\" : $value.businessItem , \"au\" : \"aa\" }\n\n     def formatValue(key, value)\n\n     if($key == \"search\")\n\n     criarSegment($value)\n\n     else $value\n\n     { for(.request.body) .key : formatValue(.key, .value) }\n\n </simple>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTRBL\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:body afterJslt = ${body}\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <removeHeader headerName=\"errorMessage\">\n\n     <constant>errorMessage</constant>\n\n </removeHeader>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on RestrictionBlackList Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<setHeader name=\"serviceUrl\">\n    <simple>{{RESTRICTIONS_BLACKLIST_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"checkEntriesAndEnrich\">\n<from uri=\"direct:checkEntriesAndEnrich\" />\n<setHeader name=\"stepName\">\n    <constant>checkEntriesAndEnrich</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>2</constant>\n</setHeader>\n<setProperty name=\"yearModel\">\n    <jsonpath>$..search..autos..vehicle.model.year</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: yearModel ==&gt; ${exchangeProperty[yearModel]}\" />\n<setProperty name=\"isNewVehicle\">\n    <jsonpath>$..search..autos..isNewVehicle</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:isNewVehicle ==&gt; ${exchangeProperty[isNewVehicle]}\" />\n<multicast parallelProcessing=\"true\" stopOnAggregateException=\"true\" stopOnException=\"true\" strategyMethodName=\"aggregate\" strategyRef=\"multicastStrategy\">\n    <to uri=\"direct:enrich\" />\n    <to uri=\"direct:checkEntries\" />\n</multicast>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:bodyAfter enrich and checkEntries ==&gt; ${body}\" />\n<setProperty name=\"limitYearModel\">\n    <jsonpath>$.[?(@.name == \"checkEntries\")].response.body.autoParam.lastYear</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:limitYearModel ==&gt; ${exchangeProperty[limitYearModel]}\" />\n<filter>\n    <simple>${exchangeProperty[yearModel]} == 'null' || ${exchangeProperty[yearModel]} == 0 || ${exchangeProperty[yearModel]} == \"\"</simple>\n    <setProperty name=\"yearModel\">\n\n <jsonpath>$.[?(@.name == \"enrich\")]..yearModel</jsonpath>\n    </setProperty>\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:yearModel ==&gt; ${exchangeProperty[yearModel]}\" />\n<filter>\n    <simple>${exchangeProperty[isNewVehicle]} == true &amp;&amp; ${exchangeProperty[yearModel]} &lt; ${exchangeProperty[limitYearModel]}</simple>\n    <removeHeader headerName=\"errorMessage\">\n\n <constant>errorMessage</constant>\n    </removeHeader>\n    <setHeader name=\"errorMessage\">\n\n <constant>Ano do modelo inferior ao permitido para 0km</constant>\n    </setHeader>\n    <to uri=\"direct:error\" />\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"enrich\">\n<from uri=\"direct:enrich\" />\n<setHeader name=\"stepName\">\n    <constant>enrich</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>3</constant>\n</setHeader>\n<setProperty name=\"internalCode\">\n    <jsonpath>$..search..autos..vehicle.model.id</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:internalCode ==&gt; ${exchangeProperty[internalCode]}\" />\n<setProperty name=\"chassisCode\">\n    <jsonpath>$..search..autos..vehicle.chassisCode</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:chassisCode ==&gt; ${exchangeProperty[chassisCode]}\" />\n<setProperty name=\"licensePlateCode\">\n    <jsonpath>$..search..autos..vehicle.licensePlateCode</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:licensePlateCode ==&gt; ${exchangeProperty[licensePlateCode]}\" />\n<choice>\n    <when>\n\n <simple>${exchangeProperty[internalCode]} == \"null\" || ${exchangeProperty[internalCode]} == null || ${exchangeProperty[internalCode]} == \"\" || ${exchangeProperty[internalCode]} == 0</simple>\n\n <setHeader name=\"CamelHttpMethod\">\n\n     <constant>GET</constant>\n\n </setHeader>\n\n <setHeader name=\"id\">\n\n     <simple>5e87686d94d3808a0c834bae</simple>\n\n </setHeader>\n\n <setHeader name=\"CamelHttpQuery\">\n\n     <simple>key=${header.key}&amp;plateCode=${exchangeProperty[licensePlateCode]}&amp;chassisCode=${exchangeProperty[chassisCode]}&amp;companyId=${env:COMPANY_ID}</simple>\n\n </setHeader>\n\n <doTry>\n\n     <to uri=\"{{ENRICH_URL}}\" />\n\n     <doCatch>\n\n\n  <exception>java.lang.Exception</exception>\n\n\n  <removeHeader headerName=\"errorMessage\">\n\n\n      <constant>errorMessage</constant>\n\n\n  </removeHeader>\n\n\n  <setHeader name=\"errorMessage\">\n\n\n      <simple>Busca por placa e chassi não encontrou um modelo válido</simple>\n\n\n  </setHeader>\n\n\n  <to uri=\"direct:error\" />\n\n     </doCatch>\n\n </doTry>\n\n <setHeader name=\"CamelJsltString\">\n\n     <constant>\n\n\n  def countModels(body, index)\n\n\n  if($body[$index])\n\n\n  size($body[$index].models) + countModels($body, $index + 1)\n\n\n  else\n\n\n  0\n\n\n  {\n\n\n  \"response\" : .,\n\n\n  \"sizeVehicles\" : size(.),\n\n\n  \"sizeModels\" : countModels(.,0)\n\n\n  }\n\n     </constant>\n\n </setHeader>\n\n <to uri=\"jslt:BodyJSLTValidateEN\" />\n\n <setProperty name=\"sizeVehicles\">\n\n     <jsonpath>$.sizeVehicles</jsonpath>\n\n </setProperty>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]:sizeVehicles ==&gt; ${exchangeProperty[sizeVehicles]}\" />\n\n <setProperty name=\"sizeModels\">\n\n     <jsonpath>$.sizeModels</jsonpath>\n\n </setProperty>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]:sizeVehicles ==&gt; ${exchangeProperty[sizeModels]}\" />\n\n <choice>\n\n     <when>\n\n\n  <simple>${exchangeProperty[sizeVehicles]} &gt; 1 || ${exchangeProperty[sizeModels]} &gt; 1</simple>\n\n\n  <removeHeader headerName=\"errorMessage\">\n\n\n      <constant>errorMessage</constant>\n\n\n  </removeHeader>\n\n\n  <setHeader name=\"errorMessage\">\n\n\n      <constant>Informar um modelo do veículo</constant>\n\n\n  </setHeader>\n\n\n  <to uri=\"direct:error\" />\n\n     </when>\n\n     <otherwise>\n\n\n  <setHeader name=\"CamelJsltString\">\n\n\n      <constant>.response</constant>\n\n\n  </setHeader>\n\n\n  <to uri=\"jslt:BodyJSLTResponseEN\" />\n\n     </otherwise>\n\n </choice>\n    </when>\n    <otherwise>\n\n <setBody>\n\n     <constant>{ \"process\" : \"ignored\" }</constant>\n\n </setBody>\n    </otherwise>\n</choice>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"checkEntries\" streamCache=\"false\">\n<from uri=\"direct:checkEntries\" />\n<setHeader name=\"stepName\">\n    <constant>checkEntries</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>4</constant>\n</setHeader>\n<doTry>\n    <setProperty name=\"effectiveDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainDates\")]..body.period.effectiveDate</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:effectiveDate ${exchangeProperty[effectiveDate]}\" />\n    <setProperty name=\"quotationDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainDates\")]..body.quotationDate</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:quotationDate ${exchangeProperty[quotationDate]}\" />\n    <setProperty name=\"productCode\">\n\n <simple>${env:PRODUCT_CODE}</simple>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:productCode ${exchangeProperty[productCode]}\" />\n    <setProperty name=\"stipulatingCode\">\n\n <jsonpath>$..counterPart.id</jsonpath>\n    </setProperty>\n    <choice>\n\n <when>\n\n     <simple>${exchangeProperty[stipulatingCode]} == \"null\"</simple>\n\n     <setProperty name=\"stipulatingCode\">\n\n\n  <constant>0</constant>\n\n     </setProperty>\n\n </when>\n    </choice>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:stipulatingCode ${exchangeProperty[stipulatingCode]}\" />\n    <setProperty name=\"unitCode\">\n\n <jsonpath>$..counterPart.branchId</jsonpath>\n    </setProperty>\n    <choice>\n\n <when>\n\n     <simple>${exchangeProperty[branchId]} == \"null\"</simple>\n\n     <setProperty name=\"branchId\">\n\n\n  <constant>0</constant>\n\n     </setProperty>\n\n </when>\n    </choice>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:unitCode ${exchangeProperty[unitCode]}\" />\n    <setProperty name=\"agreementCode\">\n\n <jsonpath>$..counterPart.agreementId</jsonpath>\n    </setProperty>\n    <choice>\n\n <when>\n\n     <simple>${exchangeProperty[agreementId]} == \"null\"</simple>\n\n     <setProperty name=\"agreementId\">\n\n\n  <constant>0</constant>\n\n     </setProperty>\n\n </when>\n    </choice>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:agreementCode ${exchangeProperty[agreementCode]}\" />\n    <setProperty name=\"internalBranchCode\">\n\n <jsonpath>$..brokers[?(@.isMain==true)].sucursalCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:internalBranchCode ${exchangeProperty[internalBranchCode]}\" />\n    <setProperty name=\"internalType\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainBroker\")]..body.brokerInternalType</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:internalType ${exchangeProperty[internalType]}\" />\n    <setProperty name=\"internalCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainBroker\")]..body.brokerInternalCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:internalCode ${exchangeProperty[internalCode]}\" />\n    <setProperty name=\"sucursalCodeParam\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"restrictionsBlackList\")]..body.productParam.sucursalCode</jsonpath>\n    </setProperty>\n    <setHeader name=\"CamelHttpQuery\">\n\n <simple>key=${header.key}&amp;companyId=${env:COMPANY_ID}&amp;productCode=${exchangeProperty[productCode]}&amp;internalBranchCode=${exchangeProperty[internalBranchCode]}&amp;stipulatingCode=${exchangeProperty[stipulatingCode]}&amp;unitCode=${exchangeProperty[unitCode]}&amp;agreementCode=${exchangeProperty[agreementCode]}&amp;startDateApol=${exchangeProperty[effectiveDate]}&amp;internalType=${exchangeProperty[internalType]}&amp;internalCode=${exchangeProperty[internalCode]}&amp;quotationDate=${exchangeProperty[quotationDate]}&amp;companyIdParam=${env:COMPANY_ID}&amp;internalBranchParam=${exchangeProperty[sucursalCodeParam]}&amp;productIdParam=${exchangeProperty[productCode]}&amp;listPaymentForms=${env:LIST_PAYMENT_FORMS}</simple>\n    </setHeader>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:${header.CamelHttpQuery}\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <removeHeader headerName=\"errorMessage\">\n\n     <constant>errorMessage</constant>\n\n </removeHeader>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on Check Entries Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<setHeader name=\"CamelHttpMethod\">\n    <constant>GET</constant>\n</setHeader>\n<setHeader name=\"serviceUrl\">\n    <simple>{{CHECK_ENTRIES_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"dataClassificationAndRns\">\n<from uri=\"direct:dataClassificationAndRns\" />\n<setHeader name=\"stepName\">\n    <constant>dataClassificationAndRns</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>5</constant>\n</setHeader>\n<multicast parallelProcessing=\"true\" stopOnAggregateException=\"true\" stopOnException=\"true\" strategyMethodName=\"aggregate\" strategyRef=\"multicastStrategy\">\n    <to uri=\"direct:dataClassification\" />\n    <to uri=\"direct:rns\" />\n    <to uri=\"direct:quotationIdGeneration\" />\n</multicast>\n<setHeader name=\"CamelJsltString\">\n    <constant>\n\n def transformDate(date)\n\n format-time(round(parse-time($date, \"yyyy-MM-dd'T'hh:mm:ss.sss\")), \"yyyy-MM-dd\")\n\n def generateDate(limiteDay)\n\n round(now()) - $limiteDay * 60 * 60 * 24\n\n def getMenor(anterior, atual, index)\n\n if($index == 0)\n\n getMenor($atual[$index], $atual, $index + 1)\n\n else if(size($atual) &lt;= $index)\n\n $anterior\n\n else if($anterior.datetime &gt; $atual[$index].datetime)\n\n getMenor($anterior, $atual, $index + 1)\n\n else\n\n getMenor($atual[$index], $atual, $index + 1)\n\n def generateOperation(vehicle, client, codRnsSegurado, limiteDay)\n\n let dateLimit = generateDate($limiteDay)\n\n if($vehicle)\n\n if($vehicle.policyEndDate &gt;= $dateLimit)\n\n {\n\n \"id\" : 2,\n\n \"description\" : \"Renovacao HDI\",\n\n \"bonus\": $vehicle.bonus,\n\n \"isCongenerRenew\" : false\n\n }\n\n else\n\n {\n\n \"id\" : 1,\n\n \"description\" : \"Novo Negocio\",\n\n \"bonus\": $vehicle.bonus,\n\n \"isCongenerRenew\" : true\n\n }\n\n else if($client)\n\n if($client.bonus &gt; 0)\n\n {\n\n \"id\" : 1,\n\n \"description\" : \"Novo Negocio\",\n\n \"bonus\": $client.bonus,\n\n \"isCongenerRenew\" : true\n\n }\n\n else if($codRnsSegurado and $codRnsSegurado &gt; 0)\n\n {\n\n \"id\" : 1,\n\n \"description\" : \"Novo Negocio\",\n\n \"bonus\": $client.bonus,\n\n \"isCongenerRenew\" : true\n\n }\n\n else\n\n {\n\n \"id\" : 1,\n\n \"description\" : \"Novo Negocio\",\n\n \"bonus\": 0,\n\n \"isCongenerRenew\" : false\n\n }\n\n else\n\n {\n\n \"id\" : 1,\n\n \"description\" : \"Novo Negocio\",\n\n \"bonus\": 0,\n\n \"isCongenerRenew\" : false\n\n }\n\n let rns = [for(.) (.) if(.name == \"rns\")]\n\n let dataClassification = [for(.) (.) if(.name == \"dataClassification\")]\n\n let quotationIdGeneration = [for(.) (.) if(.name == \"quotationIdGeneration\")]\n\n let codRnsSegurado = $rns[0].response.body.prospect.score\n\n let client = getMenor(null, [for($dataClassification[0].response.body.internalBureauAnalitycs.client)\n\n {\n\n \"bonus\" : .classBonusCode,\n\n \"datetime\" : transformDate(.actualizationDate)\n\n }\n\n ], 0)\n\n let vehicle = getMenor(null, [for($dataClassification[0].response.body.internalBureauAnalitycs.vehicle)\n\n {\n\n \"bonus\" : .bonusClass,\n\n \"datetime\" : transformDate(.actualizationDate),\n\n \"policyEnded\" : .policyEnded,\n\n \"policyEndDate\" : round(parse-time(.policyEndDate, \"yyyy-MM-dd'T'hh:mm:ss.sss\")),\n\n }\n\n ], 0)\n\n let dataClassificationResponse = [for($dataClassification)\n\n {\n\n \"index\" : .index,\n\n \"name\" : .name,\n\n \"startDate\" : .startDate,\n\n \"endDate\" : .endDate,\n\n \"response\" : {\n\n \"headers\" : .response.headers,\n\n \"body\" : {\n\n \"region\" : .response.body.region,\n\n \"vehicleModel\" : .response.body.vehicleModel,\n\n \"internalBureauAnalitycs\" : .response.body.internalBureauAnalitycs,\n\n \"operation\" : generateOperation($vehicle, $client, $codRnsSegurado, 10)\n\n }\n\n }\n\n }]\n\n flatten([$dataClassificationResponse, $rns, $quotationIdGeneration])\n    </constant>\n</setHeader>\n<to uri=\"jslt:BodyJSLTOperation\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"dataClassification\">\n<from uri=\"direct:dataClassification\" />\n<setHeader name=\"stepName\">\n    <constant>dataClassification</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>6</constant>\n</setHeader>\n<doTry>\n    <setProperty name=\"branchCode\">\n\n <jsonpath>$..brokers[?(@.isMain==true)].sucursalCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:branchCode ${exchangeProperty[branchCode]}\" />\n    <setProperty name=\"productCode\">\n\n <simple>${env:PRODUCT_CODE}</simple>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:productCode ${exchangeProperty[productCode]}\" />\n    <setProperty name=\"stipulatingCode\">\n\n <jsonpath>$..counterPart.id</jsonpath>\n    </setProperty>\n    <choice>\n\n <when>\n\n     <simple>${exchangeProperty[stipulatingCode]} == \"null\"</simple>\n\n     <setProperty name=\"stipulatingCode\">\n\n\n  <constant>0</constant>\n\n     </setProperty>\n\n </when>\n    </choice>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:stipulatingCode ${exchangeProperty[stipulatingCode]}\" />\n    <setProperty name=\"unitCode\">\n\n <jsonpath>$..counterPart.branchId</jsonpath>\n    </setProperty>\n    <choice>\n\n <when>\n\n     <simple>${exchangeProperty[unitCode]} == \"null\"</simple>\n\n     <setProperty name=\"unitCode\">\n\n\n  <constant>0</constant>\n\n     </setProperty>\n\n </when>\n    </choice>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:unitCode ${exchangeProperty[unitCode]}\" />\n    <setProperty name=\"postalCode\">\n\n <jsonpath>$.request.body..overnightPostalCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:postalCode ${exchangeProperty[postalCode]}\" />\n    <setProperty name=\"calculusDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..body.calculusVersion.calculusDate</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:calculusDate ${exchangeProperty[calculusDate]}\" />\n    <setProperty name=\"document\">\n\n <jsonpath>$.request.body.prospect..number</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:document ${exchangeProperty[document]}\" />\n    <setProperty name=\"isNew\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.isNewVehicle</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:isNew ${exchangeProperty[isNew]}\" />\n    <setProperty name=\"yearManufacturing\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.yearManufacturing</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:yearManufacturing ${exchangeProperty[yearManufacturing]}\" />\n    <setProperty name=\"modelYear\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.modelYear</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:ModelYearDC ${exchangeProperty[modelYear]}\" />\n    <setHeader name=\"CamelJsltString\">\n\n <constant>\n\n     def getProcess(payloadTracingSteps, process)\n\n     [for($payloadTracingSteps) (.) if(.name == $process)]\n\n     let auto = .request.body.search.businessItem.insurance.autos[0]\n\n     let enrich = getProcess(.payloadTracing.steps, \"enrich\")[0]\n\n     let vehicleCNSEG = $enrich.response.body[0]\n\n     {\n\n     \"internalCode\": if($auto.vehicle.model.id) $auto.vehicle.model.id else trim($vehicleCNSEG.models[0].fipeCode)\n\n     }\n\n </constant>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTDC\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:BodyJSLTDC ${body}\" />\n    <setProperty name=\"internalCode\">\n\n <jsonpath>$.internalCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:internalCode ${exchangeProperty[internalCode]}\" />\n    <setHeader name=\"CamelHttpMethod\">\n\n <constant>GET</constant>\n    </setHeader>\n    <setHeader name=\"id\">\n\n <simple>5e87641f94d3808a0c834bab</simple>\n    </setHeader>\n    <setHeader name=\"CamelHttpQuery\">\n\n <simple>key=${header.key}&amp;branchCode=${exchangeProperty[branchCode]}&amp;stipulatingCode=${exchangeProperty[stipulatingCode]}&amp;unitCode=${exchangeProperty[unitCode]}&amp;productCode=${exchangeProperty[productCode]}&amp;companyId=${env:COMPANY_ID}&amp;isNew=${exchangeProperty[isNew]}&amp;postalCode=${exchangeProperty[postalCode]}&amp;calculusDate=${exchangeProperty[calculusDate]}&amp;document=${exchangeProperty[document]}&amp;internalCode=${exchangeProperty[internalCode]}&amp;modelYear=${exchangeProperty[modelYear]}&amp;yearManufacturing=${exchangeProperty[yearManufacturing]}&amp;</simple>\n    </setHeader>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:ModelYearDC key=${header.key}&amp;branchCode=${exchangeProperty[branchCode]}&amp;stipulatingCode=${exchangeProperty[stipulatingCode]}&amp;unitCode=${exchangeProperty[unitCode]}&amp;productCode=${exchangeProperty[productCode]}&amp;companyId=${env:COMPANY_ID}&amp;isNew=${exchangeProperty[isNew]}&amp;postalCode=${exchangeProperty[postalCode]}&amp;calculusDate=${exchangeProperty[calculusDate]}&amp;document=${exchangeProperty[document]}&amp;internalCode=${exchangeProperty[internalCode]}&amp;modelYear=${exchangeProperty[modelYear]}&amp;yearManufacturing=${exchangeProperty[yearManufacturing]}&amp;\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <removeHeader headerName=\"errorMessage\">\n\n     <constant>errorMessage</constant>\n\n </removeHeader>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on DataClassification Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<setHeader name=\"serviceUrl\">\n    <simple>{{DATA_CLASSIFICATION_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"rns\">\n<from uri=\"direct:rns\" />\n<setHeader name=\"stepName\">\n    <constant>rns</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>7</constant>\n</setHeader>\n<doTry>\n    <setProperty name=\"throwException\">\n\n <simple>{{THROW_RNS}}</simple>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:throwException ${exchangeProperty[throwException]}\" />\n    <setProperty name=\"calculusDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..body.calculusVersion.calculusDate</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:calculusDate ${exchangeProperty[calculusDate]}\" />\n    <setProperty name=\"internalBranchCode\">\n\n <jsonpath>$..brokers[?(@.isMain==true)].sucursalCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:internalBranchCode ${exchangeProperty[internalBranchCode]}\" />\n    <setProperty name=\"productCode\">\n\n <simple>${env:PRODUCT_CODE}</simple>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:productCode ${exchangeProperty[productCode]}\" />\n    <setProperty name=\"prospectDocument\">\n\n <jsonpath>$..request.body.prospect.documents[0].number</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:prospectDocument ${exchangeProperty[prospectDocument]}\" />\n    <setProperty name=\"prospectType\">\n\n <jsonpath>$..request.body.prospect.documents[0].type.id</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:prospectType ${exchangeProperty[prospectType]}\" />\n    <setProperty name=\"licensePlateCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.plateCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:licensePlateCode ${exchangeProperty[licensePlateCode]}\" />\n    <setProperty name=\"chassisCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.chassisCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:chassisCode ${exchangeProperty[chassisCode]}\" />\n    <setProperty name=\"companyId\">\n\n <simple>${env:COMPANY_ID}</simple>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:companyId ${exchangeProperty[companyId]}\" />\n    <setHeader name=\"CamelHttpMethod\">\n\n <constant>GET</constant>\n    </setHeader>\n    <setHeader name=\"id\">\n\n <simple>5ea9d2213f159d24980e1945</simple>\n    </setHeader>\n    <setHeader name=\"CamelHttpQuery\">\n\n <simple>key=${header.key}</simple>\n    </setHeader>\n    <setHeader name=\"CamelHttpQuery\">\n\n <simple>calculusDate=${exchangeProperty[calculusDate]}&amp;companyId=${exchangeProperty[companyId]}&amp;internalBranchCode=${exchangeProperty[internalBranchCode]}&amp;productCode=${exchangeProperty[productCode]}&amp;prospectDocument=${exchangeProperty[prospectDocument]}&amp;prospectType=${exchangeProperty[prospectType]}&amp;licensePlateCode=${exchangeProperty[licensePlateCode]}&amp;chassisCode=${exchangeProperty[chassisCode]}</simple>\n    </setHeader>\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <removeHeader headerName=\"errorMessage\">\n\n     <constant>errorMessage</constant>\n\n </removeHeader>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on RNS Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<setHeader name=\"serviceUrl\">\n    <simple>{{RNS_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"bestOffer\">\n<from uri=\"direct:bestOffer\" />\n<setHeader name=\"stepName\">\n    <constant>bestOffer</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>8</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\" />\n<setProperty name=\"timeout\">\n    <simple>{{TIMEOUT_BESTOFFER}}</simple>\n</setProperty>\n<doTry>\n    <setHeader name=\"CamelJsltString\">\n\n <simple>\n\n     def getResponse(payloadTracingSteps, process)\n\n     [for($payloadTracingSteps) (.) if(.name == $process)]\n\n     def getFlagRnsId()\n\n     if($rns.prospect.score and $rns.prospect.score &gt; 0) $rns.prospect.score else 0\n\n     def getPercentageFipe(value)\n\n     if($value and $value &gt; 0) $value else 100\n\n     def getRenovationTypeId(operation)\n\n     if($operation.isCongenerRenew) 3 else $operation.id\n\n     def getAdditionalInformations(internalBureau)\n\n     let districtInformation = if($internalBureau.districtInformation and $internalBureau.districtInformation[0].additionalValues)\n\n     [for($internalBureau.districtInformation[0].additionalValues) { \"name\": .key, \"value\": .value } ]\n\n     else []\n\n     let client = if($internalBureau.client and $internalBureau.client[0].additionalValues)\n\n     [for($internalBureau.client[0].additionalValues) { \"name\": .key, \"value\": .value } ]\n\n     else []\n\n     let vehicle = if($internalBureau.vehicle and $internalBureau.vehicle[0].additionalValues)\n\n     [for($internalBureau.vehicle[0].additionalValues) { \"name\": .key, \"value\": .value } ]\n\n     else []\n\n     flatten([$districtInformation, $client, $vehicle])\n\n     def rpad(value, character, times)\n\n     let array = ($times - size(string($value))) * (\"\" + $character)\n\n     $value + $array\n\n     def formatReal(valor)\n\n     let valorSplited = split($valor,\"\\.\")\n\n     let inteiro = if($valorSplited[0]==null)\"\" else $valorSplited[0]\n\n     let decimais = if($valorSplited[1]==null)\",00\" else \",\"+rpad($valorSplited[1],\"0\",2)\n\n     let valorReal = if($inteiro !=\"\") \"R$ \"+join(split($inteiro , \"(?=(?:...)*$)\"),\".\")+$decimais\n\n     $valorReal\n\n     def trimRight(valor, caracter)\n\n     replace($caracter + $valor,\"^\" + $caracter + \"*\", \"\")\n\n     def criarSegment(value)\n\n     [\n\n     {\n\n     \"id\": 1,\n\n     \"code\": 1,\n\n     \"description\": \"INSURANCE\",\n\n     \"components\": [\n\n     {\n\n     \"id\": 1,\n\n     \"code\": 1,\n\n     \"description\": \"AUTO\",\n\n     \"compositions\": [\n\n     {\n\n     \"id\": 9,\n\n     \"code\": 433,\n\n     \"description\": \"ONE CLICK\"\n\n     }\n\n     ]\n\n     }\n\n     ]\n\n     }\n\n     ]\n\n     def montaObjetoWellKnow(campo, index)\n\n     {\n\n     \"id\" : $index + 1,\n\n     \"description\": $campo.name,\n\n     \"value\": $campo.value\n\n     }\n\n     def montaArray(campo, index)\n\n     if($campo[$index + 1])\n\n     flatten([[montaObjetoWellKnow($campo[$index], $index)], montaArray($campo, $index + 1)])\n\n     else\n\n     [montaObjetoWellKnow($campo[$index], $index)]\n\n     def generateRegion(key)\n\n     if($key == \"regionClass\") \"regionclass\" else $key\n\n     let neurotech = getResponse(.payloadTracing.steps, \"neurotech\")[0].response.body\n\n     let quotationIdGeneration = getResponse(.payloadTracing.steps, \"quotationIdGeneration\")[0].response.body\n\n     let checkEntries = getResponse(.payloadTracing.steps, \"checkEntries\")[0].response.body\n\n     let dataClassification = getResponse(.payloadTracing.steps, \"dataClassification\")[0].response.body\n\n     let percentageFipe = getPercentageFipe(getResponse(.payloadTracing.steps, \"checkEntries\")[0].response.body.brokersDefault.coverages.percentageFipe)\n\n     let rns = getResponse(.payloadTracing.steps, \"rns\")[0].response.body\n\n     let insurance = .request.body.search.businessItem.insurance\n\n     let broker = $insurance.brokers[0]\n\n     let vehicleModel = $dataClassification.vehicleModel\n\n     let auto = $insurance.autos[0]\n\n     let renovationTypeId = getRenovationTypeId($dataClassification.operation)\n\n     let vehicleDueQuotation = getResponse(.payloadTracing.steps, \"generateMainVehicleDueQuotation\")[0].response.body\n\n     let arrayAdditionalInformation = getAdditionalInformations($dataClassification.internalBureauAnalitycs)\n\n     {\n\n     \"wellKnowIdentities\": montaArray(flatten([$neurotech.flowParameters, $arrayAdditionalInformation]), 0),\n\n     \"insurance\": [\n\n     {\n\n     \"quotationId\": $quotationIdGeneration.quotation.id,\n\n     \"sucursalCode\": $broker.sucursalCode,\n\n     \"renovationTypeId\": $renovationTypeId,\n\n     \"bonusClass\": $dataClassification.operation.bonus,\n\n     \"flagRNSId\": getFlagRnsId(),\n\n     \"validityDate\" : $checkEntries.calculusVersion.calculusDate,\n\n     \"segment\" : criarSegment(.request.body.search)[0],\n\n     \"items\": [\n\n     {\n\n     \"auto\": {\n\n     \"fipePercentageUsed\": $percentageFipe,\n\n     \"vehicle\": {\n\n     \"licensePlateCode\": $vehicleDueQuotation.plateCode,\n\n     \"chassisCode\": $vehicleDueQuotation.chassisCode,\n\n     \"manufactureYear\": $vehicleDueQuotation.yearManufacturing,\n\n     \"isNewVehicle\": if($auto.isNewVehicle) 1 else 0,\n\n     \"model\": {\n\n     \"id\": number(trimRight($vehicleModel.code, \"0\")),\n\n     \"year\": $vehicleDueQuotation.modelYear,\n\n     \"description\": $vehicleModel.descriptionType + \" \" + $vehicleModel.description,\n\n     \"fipeCode\": $vehicleModel.fipeCode,\n\n     \"groupClass\": $vehicleModel.group.class.code,\n\n     \"seatingCapacity\": $vehicleModel.seatCount,\n\n     \"isInsurable\": $vehicleModel.isInsurable,\n\n     \"fuelType\": {\n\n     \"id\" : if($vehicleModel.fuelType.id == \"0\" or not($vehicleModel.fuelType.id)) \"1\" else number(trimRight($vehicleModel.fuelType.id, \"0\")),\n\n     \"description\" : if($vehicleModel.fuelType.id == \"0\" or not($vehicleModel.fuelType.id)) \"Gasolina\" else $vehicleModel.fuelType.description,\n\n     },\n\n     \"category\": {\n\n     \"id\": number(trimRight($vehicleModel.category.code, \"0\")),\n\n     \"description\": $vehicleModel.category.description\n\n     },\n\n     \"categoryThirdParty\": {\n\n     \"id\": number(trimRight($vehicleModel.group.code, \"0\")),\n\n     \"description\": $vehicleModel.group.description\n\n     },\n\n     \"brand\": {\n\n     \"description\": $vehicleModel.branch.description\n\n     },\n\n     \"gearBox\": {\n\n     \"id\": $vehicleModel.exchangeRate.id,\n\n     \"description\": $vehicleModel.exchangeRate.description\n\n     },\n\n     \"traction\": {\n\n     \"id\": $vehicleModel.traction.id,\n\n     \"description\": $vehicleModel.traction.description\n\n     }\n\n     }\n\n     },\n\n     \"address\": { for($dataClassification.region.address) generateRegion(.key) : .value },\n\n     \"hullamount\": {\n\n     \"amount\": $vehicleModel.isValue,\n\n     \"currency\": \"R$\",\n\n     \"amountFormatted\": formatReal($vehicleModel.isValue)\n\n     }\n\n     }\n\n     }\n\n     ]\n\n     }\n\n     ]\n\n     }\n\n </simple>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTBestOffer\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:bodyJSLTBestOffer ${body}\" />\n    <setHeader name=\"CamelHttpMethod\">\n\n <constant>POST</constant>\n    </setHeader>\n    <setHeader name=\"id\">\n\n <simple>5e878d2894d3808a0c834bb6</simple>\n    </setHeader>\n    <setHeader name=\"CamelHttpQuery\">\n\n <simple>key=${header.key}</simple>\n    </setHeader>\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on BestOffer Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<setHeader name=\"Content-Type\">\n    <constant>application/json;charset=UTF-8</constant>\n</setHeader>\n<setHeader name=\"serviceUrl\">\n    <simple>{{BEST_OFFER_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<removeHeader headerName=\"errorMessage\">\n    <constant>errorMessage</constant>\n</removeHeader>\n<choice>\n    <when>\n\n <simple>${header.CamelHttpResponseCode} == 500</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>BestOffer indisponível</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <when>\n\n <simple>${header.CamelHttpResponseCode} == 404</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Não foi best offer</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <when>\n\n <simple>${header.CamelHttpResponseCode} &gt; 399</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Best offer com problemas técnicos</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <otherwise></otherwise>\n</choice>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"calculationOrchestrator\">\n<from uri=\"direct:calculationOrchestrator\" />\n<setHeader name=\"stepName\">\n    <constant>calculationOrchestrator</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>9</constant>\n</setHeader>\n<setHeader name=\"CamelHttpMethod\">\n    <constant>POST</constant>\n</setHeader>\n<setHeader name=\"id\">\n    <simple>5e87744e94d3808a0c834bb3</simple>\n</setHeader>\n<setHeader name=\"codeTmp\">\n    <simple>378</simple>\n</setHeader>\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}</simple>\n</setHeader>\n<setHeader name=\"CamelCharsetName\">\n    <constant>UTF-8</constant>\n</setHeader>\n<setHeader name=\"serviceUrl\">\n    <simple>{{ORCHESTRATOR_CALCULUS_URL}}</simple>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:calculationOrchestrator => ${body}\" />\n<doTry>\n    <setProperty name=\"quotationOperationId\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"dataClassification\")]..body.operation.id</jsonpath>\n    </setProperty>\n    <setHeader name=\"CamelJsltString\">\n\n <simple>\n\n     def formatNumber (value)\n\n     if($value and $value != \"null\") number($value) else 0\n\n     def getValueType(code)\n\n     if($code == 6) \"DET\" else \"MER\"\n\n     def getValueByCategory(item)\n\n     if($item.category.id == 2) $item.range.data\n\n     else if($item.category.id == 3) $item.options[0].code\n\n     else if($item.category.id == 1) $item.defined.data\n\n     else 0\n\n     def getPercentageFipe(value)\n\n     if($value and $value &gt; 0) $value else 100\n\n     def trimRight(valor, caracter)\n\n     let trim = replace($caracter + $valor,\"^\" + $caracter + \"*\", \"\")\n\n     if($trim) $trim else \"0\"\n\n     def getResponse(payloadTracing, value)\n\n     [for($payloadTracing.steps) (.) if(.name == $value)]\n\n     def setElements(object, newElements)\n\n     let elements = flatten([[for($object) .key], [for($newElements) .key]])\n\n     {\n\n     for($elements) . : if(get-key($newElements, ., \"not-exists\") != \"not-exists\") get-key($newElements, .) else get-key($object, .)\n\n     }\n\n     def buildObject(array)\n\n     {\n\n     for($array) .[0] : .[1]\n\n     }\n\n     def changeAttributes(transforms, item)\n\n     let elements = [for($transforms)\n\n     let transform = .\n\n     if(string($transform.attribute.id) == string($item.id))\n\n     [$transform.attribute.field, $transform.attribute.value]\n\n     ]\n\n     setElements($item, buildObject($elements))\n\n     let quotationIdGeneration = getResponse(.payloadTracing, \"quotationIdGeneration\"\n   )[0].response.body\n\n     let mainDates\n      = getResponse(.payloadTracing, \"generateMainDates\"\n\n)[0].response.body\n\n     let vehicleAndDue\n  = getResponse(.payloadTracing, \"generateMainVehicleDueQuotation\")[0].response.body\n\n     let generateMainBroker    = getResponse(.payloadTracing, \"generateMainBroker\"\n      )[0].response.body\n\n     let dataClassification    = getResponse(.payloadTracing, \"dataClassification\"\n      )[0].response.body\n\n     let checkEntries\n   = getResponse(.payloadTracing, \"checkEntries\"\n\n     )[0].response.body\n\n     let restrictionsBlackList = getResponse(.payloadTracing, \"restrictionsBlackList\"\n   )[0].response.body\n\n     let enrich\n\n  = getResponse(.payloadTracing, \"enrich\"\n\n\n    )[0].response.body\n\n     let rns\n\n     = getResponse(.payloadTracing, \"rns\"\n\n\n\n)[0].response.body\n\n     let neurotech\n      = getResponse(.payloadTracing, \"neurotech\"\n\n\n )[0].response.body\n\n     let bestOffer\n      = getResponse(.payloadTracing, \"bestOffer\"\n\n\n )[0].response.body\n\n     let adjustGuarantees      = getResponse(.payloadTracing, \"adjustGuarantees\"\n\n )[0].response.body\n\n     let adjustAdditionals     = getResponse(.payloadTracing, \"adjustAdditionals\"\n\n)[0].response.body\n\n     let clientName\n     = [for($neurotech.flowParameters) { \"name\" : .value } if(.name == \"RET_NL_NOME\") ]\n\n     let composition\n\n      = .request.body.compositions[0]\n\n     let prospect\n\n\n  = .request.body.prospect\n\n     let document\n\n\n  = [for($prospect.documents) (.) if(.type.id == 1 or .type.id == 2)]\n\n     let businessItem\n\n     = .request.body.search.businessItem\n\n     let insuranceInput\n\n   = $businessItem.insurance\n\n     let vehicleInput\n\n     = $insuranceInput.autos[0].vehicle\n\n     let mainBroker\n\n\n= [for($insuranceInput.brokers) (.) if(.isMain)]\n\n     let internalBureauAnalitycsCliente = $dataClassification.client\n\n     let internalBureauAnalitycsVehicle = $dataClassification.vehicle\n\n     let calculusVersion\n\n  = $checkEntries.calculusVersion\n\n     let executive\n\n\n = $checkEntries.executive\n\n     let seatCount\n\n\n =      if($enrich[0].seatCount\n    ) $enrich[0].seatCount\n\n     else\n\n\n\n\n  $dataClassification.vehicleModel.seatCount\n\n     let fuelTypeId\n\n\n=      if($enrich[0].fuel.id\n      ) $enrich[0].fuel.id\n\n     else if($vehicleInput.model.fuelType.id) $vehicleInput.model.fuelType.id\n\n     else\n\n\n\n\n  $dataClassification.vehicleModel.fuelType.id\n\n     let customerRNS\n  = $rns.prospect.score\n\n     let vehicleRNS\n   = $rns.vehicle.score\n\n     let startDate\n    = $mainDates.period.effectiveDate\n\n     let endDate\n      = $mainDates.period.expirationDate\n\n     let quotOperationTypeId = if($dataClassification.operation.id == 2) 2 else 1\n\n     let itemOperationId     = if($quotOperationTypeId == 2) 12 else 11\n\n     let renewalTypeId\n=      if($dataClassification.operation.id\n\n== 2   ) 2\n\n     else if($dataClassification.operation.isCongenerRenew == true) 3\n\n     else 1\n\n     let bonusClass\n   = $dataClassification.operation.bonus\n\n     let percentageFipe = getPercentageFipe(getResponse(.payloadTracing, \"checkEntries\")[0].response.body.brokersDefault.coverages.percentageFipe)\n\n     let insuranceDocumentKey = {\n\n     \"id\"\n\n    : 0,\n\n     \"companyId\"\n    : ${env:COMPANY_ID_NOT_FORMMATED},\n\n     \"organizationBranchId\": formatNumber(trimRight($mainBroker[0].sucursalCode, \"0\")),\n\n     \"productId\"\n    : number(${env:PRODUCT_CODE}),\n\n     \"documentType\"\n : \"\",\n\n     \"documentSeq\"\n  : 0,\n\n     \"endorsementSeq\"      : 0,\n\n     \"quotationId\"\n  : $quotationIdGeneration.quotation.id,\n\n     \"originId\"\n     : ${env:ORIGIN_ID},\n\n     \"realQuotationId\"     : $quotationIdGeneration.quotation.id,\n\n     \"quoteGroupId\"\n : \"\",\n\n     \"loanContractNumber\"  : 0\n\n     }\n\n     let currency = {\n\n     \"code\" : \"${env:CURRENCY_CODE}\",\n\n     \"value\": ${env:CURRENCY_VALUE}\n\n     }\n\n     let quoteVersion = {\n\n     \"versionId\"      : $calculusVersion.versionCode,\n\n     \"calculationDate\": $calculusVersion.calculusDate,\n\n     \"quoteDueDate\"   : $vehicleAndDue.quotationDueDate\n\n     }\n\n     let bureauData = {\n\n     \"bureauDataDueDate\"   : \"\",\n\n     \"underwritingSourceId\": \"\",\n\n     \"customerRNSScore\"    : if($customerRNS) $customerRNS else 0,\n\n     \"bureauDataKey\"\n: \"\"\n\n     }\n\n     let stipulating = {\n\n     \"id\"\n    : $insuranceInput.counterPart.id,\n\n     \"unityCode\"    : $insuranceInput.counterPart.branchId,\n\n     \"agreementCode\": $insuranceInput.counterPart.agreementId\n\n     }\n\n     let agency = {\n\n     \"bankId\"\n  : 0,\n\n     \"agencyId\"\n: $businessItem.bankBranch.code,\n\n     \"bssId\"\n   : $businessItem.bankBranch.bankServiceOfficeCode,\n\n     \"registrationId\" : $businessItem.bankBranch.enrollments[0].code,\n\n     \"registrationId2\": $businessItem.bankBranch.enrollments[1].code\n\n     }\n\n     let customer = {\n\n     \"name\"\n\n : if($clientName[0].name) $clientName[0].name else \"\",\n\n     \"cpfCnpj\"\n     : formatNumber(trimRight($document[0].number, \"0\")),\n\n     \"personType\"\n  : if($document[0].type.id == 1) \"F\" else \"J\"\n\n     }\n\n     let broker = [\n\n     {\n\n     \"brokerType\"\n   : $generateMainBroker.brokerInternalType,\n\n     \"brokerId\"\n     : formatNumber($generateMainBroker.brokerInternalCode),\n\n     \"isMain\"\n\n: true,\n\n     \"commissionPercentage\": formatNumber($vehicleAndDue.commission) / 100,\n\n     \"executiveId\"\n  : $executive.id,\n\n     \"personType\"\n   : if($restrictionsBlackList.brokers[0].documents[0].type.id == 2) \"J\" else \"F\",\n\n     \"cpf\"\n\n   : $restrictionsBlackList.brokers[0].documents[0].number\n\n     }\n\n     ]\n\n     let profile = {\n\n     \"isHDIInsured\"   : false,\n\n     \"isActiveRenewal\": false,\n\n     \"activityId\"     : 0\n\n     }\n\n     let regionInformation = {\n\n     \"zipCode\"      : formatNumber(trimRight($dataClassification.region.address.postalCode, \"0\")),\n\n     \"regionId\"     : formatNumber(trimRight($dataClassification.region.address.regionClass.code, \"0\")),\n\n     \"regionGroupId\": formatNumber(trimRight($dataClassification.region.address.regionClass.group.code, \"0\")),\n\n     \"cityCode\"     : $dataClassification.region.address.city.code,\n\n     \"stateCode\"    : $dataClassification.region.address.city.state.code,\n\n     \"latitude\"     : formatNumber($dataClassification.region.address.latitude),\n\n     \"longitude\"    : formatNumber($dataClassification.region.address.longitude)\n\n     }\n\n     let vehicle = {\n\n     \"fipePercentage\"\n: $percentageFipe,\n\n     \"isBrandNew\"\n    : if($vehicleAndDue.isNewVehicle) true else false,\n\n     \"licensePlateStateCode\": \"\",\n\n     \"licensePlate\"\n  : $vehicleAndDue.plateCode,\n\n     \"chassisCode\"\n   : $vehicleAndDue.chassisCode,\n\n     \"vehicleRNSScore\"      : if($vehicleRNS) $vehicleRNS else 0,\n\n     \"isInsurable\"\n   : $dataClassification.vehicleModel.isInsurable == 1,\n\n     \"model\": {\n\n     \"id\"\n\n  : $dataClassification.vehicleModel.code,\n\n     \"description\"\n: $dataClassification.vehicleModel.description,\n\n     \"fipeCode\"\n   : $dataClassification.vehicleModel.fipeCode,\n\n     \"modelType\"\n  : $dataClassification.vehicleModel.descriptionType,\n\n     \"modelBrand\"\n : $dataClassification.vehicleModel.branch.description,\n\n     \"seatCount\"\n  : $seatCount,\n\n     \"fuelId\"\n     : formatNumber($fuelTypeId),\n\n     \"modelGroupId\"      : formatNumber($dataClassification.vehicleModel.group.code),\n\n     \"modelClassId\"      : formatNumber($dataClassification.vehicleModel.group.class.code),\n\n     \"taxCategoryId\"     : formatNumber($dataClassification.vehicleModel.category.code),\n\n     \"taxCategoryGroupId\": formatNumber($dataClassification.vehicleModel.category.group.code),\n\n     \"modelYear\"\n  : $vehicleAndDue.modelYear,\n\n     \"manufacturingYear\" : $vehicleAndDue.yearManufacturing\n\n     }\n\n     }\n\n     let guarantees = [for($bestOffer.guarantees)\n\n     let sumInsured = getValueByCategory(.indemnityLimits[0].fields[0])\n\n     {\n\n     \"id\"\n\n : .id,\n\n     \"sumInsuredTypeId\" : .code,\n\n     \"classId\"\n   : if(.classId) .classId else 31,\n\n     \"valueType\"\n : \"\",\n\n     \"sumInsured\"\n: if($sumInsured) replace($sumInsured, \"[a-zA-Z\\-]\",\"\") else 0,\n\n     \"deductibleValue\"  : 0\n\n     }\n\n     ]\n\n     let adjustedGuarantees = [for($guarantees)\n\n     let changed = changeAttributes($adjustGuarantees.specification.transforms, .)\n\n     { for($changed) .key : .value if(contains(.key,[\"sumInsuredTypeId\", \"valueType\", \"sumInsured\", \"deductibleValue\", \"id\", \"classId\", \"isBenefit\", \"details\"])) }\n\n     ]\n\n     let additionals = [for($bestOffer.additionals)\n\n     let optionId = .indemnityLimits[0].fields[0].options[0].id\n\n     let optionCode = .indemnityLimits[0].fields[0].options[0].code\n\n     let sumInsured = if($optionCode) 0 else getValueByCategory(.indemnityLimits[0].fields[0])\n\n     {\n\n     \"id\"\n  : if($optionId  ) $optionId   else .id,\n\n     \"code\"\n: if($optionCode) $optionCode else .code,\n\n     \"classId\"    : .classId,\n\n     \"valueType\"  : \"\",\n\n     \"sumInsured\" : if($sumInsured) $sumInsured else 0,\n\n     \"isBenefit\"  : false,\n\n     \"details\"    : .deductibles\n\n     }\n\n     ]\n\n     let adjustedAdditionals = [for($additionals)\n\n     let changed = changeAttributes($adjustAdditionals.specification.transforms, .)\n\n     { for($changed) (if(.key == \"code\") \"id\" else .key) : .value if(contains(.key,[\"code\",\"sumInsuredTypeId\", \"valueType\", \"sumInsured\", \"deductibleValue\", \"id\", \"classId\", \"isBenefit\", \"details\"])) }\n\n     ]\n\n     let coverage = {\n\n     \"coverageCode\"\n\n: formatNumber(trimRight($bestOffer.code, \"0\")),\n\n     \"deductibleCode\"\n     : formatNumber(trimRight($bestOffer.deductibles[0].code, \"0\")),\n\n     \"marketValueSumInsuredPerc\" : $percentageFipe,\n\n     \"guarantees\"\n\n  : $adjustedGuarantees,\n\n     \"additionals\"\n\n : $adjustedAdditionals,\n\n     \"accessories\": [for($bestOffer.accessories)\n\n     let sumInsured = getValueByCategory(.indemnityLimits[0].fields[0])\n\n     {\n\n     \"id\"\n\n: formatNumber(trimRight(.code, \"0\")),\n\n     \"classId\"\n  : formatNumber(trimRight(.classId, \"0\")),\n\n     \"sumInsured\"      : if($sumInsured) $sumInsured else 0,\n\n     \"deductibleAmount\": 0\n\n     }\n\n     ],\n\n     \"protections\": [for($bestOffer.protections)\n\n     {\n\n     \"id\": formatNumber(trimRight(.code, \"0\"))\n\n     }\n\n     ]\n\n     }\n\n     let renewalInfo = {\n\n     \"bonusClass\"      : $bonusClass,\n\n     \"claimCount\"      : 0,\n\n     \"operationTypeId\" : $itemOperationId,\n\n     \"previousPlayerId\": 0,\n\n     \"renewalTypeId\"   : $renewalTypeId\n\n     }\n\n     let profileItemQuestionnaire = [\n\n     {\n\n     \"questionId\": 19,\n\n     \"answerId\"  : 1122\n\n     },\n\n     {\n\n     \"questionId\": 18,\n\n     \"answerId\"  : 1122\n\n     }\n\n     ]\n\n     let profileItem = {\n\n     \"profileScore\"     : 0.0,\n\n     \"serasaScore\"      : 0,\n\n     \"serasaCustomScore\": 0,\n\n     \"questionnaire\": $profileItemQuestionnaire\n\n     }\n\n     let profileDriverQuestionnaire = null\n\n     let driver = [\n\n     {\n\n     \"id\"\n   : 1,\n\n     \"name\"\n : if($clientName[0].name) $clientName[0].name else \"\",\n\n     \"cpf\"\n  : formatNumber(trimRight($document[0].number, \"0\")),\n\n     \"isMainDriver\": true,\n\n     \"profile\"     : $profileDriverQuestionnaire\n\n     }\n\n     ]\n\n     let additionalVariable = flatten([\n\n     [for($dataClassification.internalBureauAnalitycs.client[0].additionalValues)\n\n     .\n\n     ],[for($dataClassification.internalBureauAnalitycs.vehicle[0].additionalValues)\n\n     .\n\n     ],[for($dataClassification.internalBureauAnalitycs.districtInformation[0].additionalValues)\n\n     .\n\n     ],[\n\n     {\n\n     \"key\" : \"tractionDescription\", \"value\" : $dataClassification.vehicleModel.traction.description\n\n     }\n\n     ],[\n\n     {\n\n     \"key\" : \"engineDescription\", \"value\" : $dataClassification.vehicleModel.engine.description\n\n     }\n\n     ],[\n\n     {\n\n     \"key\" : \"gearBoxDescription\", \"value\" : $dataClassification.vehicleModel.exchangeRate.description\n\n     }\n\n     ],[\n\n     {\n\n     \"key\" : \"tractionId\", \"value\" : $dataClassification.vehicleModel.traction.id\n\n     }\n\n     ],[\n\n     {\n\n     \"key\" : \"engineId\", \"value\" : $dataClassification.vehicleModel.engine.id\n\n     }\n\n     ],[\n\n     {\n\n     \"key\" : \"gearBoxId\", \"value\" : $dataClassification.vehicleModel.exchangeRate.id\n\n     }\n\n     ],[\n\n     {\n\n     \"key\" : \"DescEstipulante\", \"value\" : $checkEntries.stipulating.unit.agreement.commercialDiscount\n\n     }\n\n     ]\n\n     ])\n\n     let externalAdditionalVariable = [for($neurotech.flowParameters)\n\n     { \"key\" : .name, \"value\" : .value }\n\n     if(.name and .value)\n\n     ]\n\n     let items = [\n\n     {\n\n     \"itemId\"\n\n\n: 1,\n\n     \"profile\"\n\n      : $profileItem,\n\n     \"coverage\"\n\n     : $coverage,\n\n     \"renewalInfo\"\n\n  : $renewalInfo,\n\n     \"vehicle\"\n\n      : $vehicle,\n\n     \"circulationRegion\"\n   : $regionInformation,\n\n     \"overnightRegion\"\n     : $regionInformation,\n\n     \"partnerPlanCode\"\n     : 0,\n\n     \"multiAnnualCoefficient\"     : 0.0,\n\n     \"driver\"\n\n\n: $driver,\n\n     \"additionalVariable\"\n  : [for($additionalVariable) . if(. and .value != null)],\n\n     \"externalAdditionalVariable\" : $externalAdditionalVariable\n\n     }\n\n     ]\n\n     let validity = {\n\n     \"startDate\": $startDate,\n\n     \"endDate\"  : $endDate\n\n     }\n\n     let insuranceDocument = {\n\n     \"insuranceDocumentKey\"\n    : $insuranceDocumentKey,\n\n     \"currency\"\n\n\n  : $currency,\n\n     \"validity\"\n\n\n  : $validity,\n\n     \"agency\"\n\n\n    : $agency,\n\n     \"stipulating\"\n\n      : $stipulating,\n\n     \"quoteVersion\"\n\n     : $quoteVersion,\n\n     \"bureauData\"\n\n\n: $bureauData,\n\n     \"operationTypeId\"\n\n  : $quotOperationTypeId,\n\n     \"quoteDate\"\n\n\n : $mainDates.quotationDate,\n\n     \"calculationScriptId\"\n     : ${env:CALCULUS_SCRIPT},\n\n     \"channelId\"\n\n\n : ${env:CHANNEL_ID},\n\n     \"commissionPercentage\"\n    : formatNumber($vehicleAndDue.commission) / 100,\n\n     \"randomNumber\"\n\n     : floor(random() * 100) / 100,\n\n     \"partnerId\"\n\n\n : 0,\n\n     \"originalPolicyCoverageStartDate\": $startDate,\n\n     \"itemCount\"\n\n\n : 1,\n\n     \"items\"\n\n\n     : $items,\n\n     \"customer\"\n\n\n  : $customer,\n\n     \"broker\"\n\n\n    : $broker,\n\n     \"profile\"\n\n\n   : $profile\n\n     }\n\n     {\n\n     \"insuranceDocument\": $insuranceDocument\n\n     }\n\n </simple>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTOC\"/>\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <removeHeader headerName=\"errorMessage\"/>\n\n <setHeader name=\"errorMessage\">\n\n     <simple>Error On Calculation Engine Process</simple>\n\n </setHeader>\n\n <to uri=\"direct:error\"/>\n    </doCatch>\n</doTry>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:calculus = ${body}\"/>\n<setProperty name=\"requestPayload\">\n    <simple>${body}</simple>\n</setProperty>\n<to uri=\"direct:callService\"/>\n<setHeader name=\"CamelJsltString\">\n    <constant>.</constant>\n</setHeader>\n<to uri=\"jslt:JSLTBeforeResponseCalculationOrchestrator\"/>\n<setProperty name=\"allPremiums\">\n    <jsonpath>$.premium..premium</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: allPremiums ${exchangeProperty[allPremiums]}\"/>\n<setBody name=\"CamelJsltString\">\n    <simple>\n\n {\n\n \"responseCalculo\" : ${body},\n\n \"premiuns\" : [${exchangeProperty[allPremiums]}],\n\n \"traceId\": \"${header.x-trace-id}\"\n\n }\n    </simple>\n</setBody>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: body ${body}\"/>\n<setHeader name=\"CamelJsltString\">\n    <simple>\n\n def generateException()\n\n {\n\n \"code\": string(\"452\"),\n\n \"message\": \"Erro ao processar os dados (9)\",\n\n \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (9)\",\n\n \"errors\": [\n\n {\n\n \"code\": \"452\",\n\n \"message\": if(.responseCalculo.underwriting.restrictionMessage) .responseCalculo.underwriting.restrictionMessage else \"Processo de calculo não retornou corretamente\" ,\n\n \"traceId\": if(.traceId) .traceId else $traceId\n\n }\n\n ]\n\n }\n\n let arrayPremiums = .premiuns\n\n let sumAllPremiums = sum([for($arrayPremiums) if(.) . else 0])\n\n let allObject = [ for(.) .key ] + [\"totalPremium\"]\n\n let body = .\n\n let object = {\n\n for($allObject) . : if(get-key($body, .)) get-key($body, .) else $sumAllPremiums\n\n }\n\n if($sumAllPremiums)\n\n {\n\n \"responseCalculo\" : .responseCalculo,\n\n \"totalPremium\" : $sumAllPremiums,\n\n \"premiuns\" : .premiuns\n\n }\n\n else\n\n businessException(generateException())\n    </simple>\n</setHeader>\n<to uri=\"jslt:JSLTAfterResponseCalculationOrchestrator\"/>\n<filter>\n    <simple>${env:AMBIENTE_PRODUCAO} == false</simple>\n    <setHeader name=\"requestPayload\">\n\n <simple>${exchangeProperty[requestPayload]}</simple>\n    </setHeader>\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:response calculus = ${body}\"/>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\"/>   </route>   <!-- payment methods step-->   <route id=\"paymentMethods\">\n<from uri=\"direct:paymentMethods\" />\n<setHeader name=\"CamelHttpMethod\">\n    <constant>POST</constant>\n</setHeader>\n<setHeader name=\"codeTmp\">\n    <simple>415</simple>\n</setHeader>\n<setHeader name=\"id\">\n    <simple>5edf8f2dd617933cdcdfe5fd</simple>\n</setHeader>\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}</simple>\n</setHeader>\n<setHeader name=\"stepName\">\n    <constant>paymentMethods</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>10</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\" />\n<setHeader name=\"CamelJsltString\">\n    <simple>\n\n def getResponse(payloadTracing, value)\n\n [for($payloadTracing.steps) (.) if(.name == $value)]\n\n def getBillingId(code, paymentMethods)\n\n { for($paymentMethods.billingTypes) \"id\" : .id if(uppercase(.code) ==uppercase($code)) }\n\n let businessItem =.request.body.search.businessItem\n\n let generateMainDates = getResponse(.payloadTracing, \"generateMainDates\")[0].response.body\n\n let installmentDay = format-time(round(parse-time($generateMainDates.installmentDate, \"yyyy-MM-dd\")), \"dd\")\n\n let mainDates = getResponse(.payloadTracing, \"generateMainDates\")[0].response.body\n\n let paymentMethods = getResponse(.payloadTracing, \"checkEntries\")[0].response.body.offerInstallments\n\n let calculationOrchestrator = getResponse(.payloadTracing, \"calculationOrchestrator\")[0].response.body\n\n {\n\n \"acordo\": [\n\n {\n\n \"flagJuros\": null,\n\n \"qtdeParcelamento\": null\n\n }\n\n ],\n\n \"corretor\": [for($paymentMethods.broker)\n\n {\n\n \"codFormaPagamento\": .billingTypeCode,\n\n \"qtdeMaxParcelamento\": .maxInstallment,\n\n \"idFormaPagamento\": getBillingId(.billingTypeCode, $paymentMethods).id\n\n }\n\n if(getBillingId(.billingTypeCode, $paymentMethods).id)\n\n ],\n\n \"cotacao\": [\n\n {\n\n \"numDiaMelhorPagamento\": 0,\n\n \"vigencia\": {\n\n \"dtEfetivacao\": $mainDates.period.effectiveDate\n\n },\n\n \"vlrPremioNet\": [\n\n {\n\n \"codMoeda\": \"R$\",\n\n \"vlrTotal\": $calculationOrchestrator.totalPremium\n\n }\n\n ]\n\n }\n\n ],\n\n \"estipulante\": [for($paymentMethods.counterPart)\n\n {\n\n \"codFormaPagamento\": .billingTypeCode,\n\n \"flagJuros\": .isInterestRate,\n\n \"qtdeMaxParcelamento\": .maxInstallment,\n\n \"idFormaPagamento\": getBillingId(.billingTypeCode, $paymentMethods).id\n\n }\n\n if(getBillingId(.billingTypeCode, $paymentMethods).id)\n\n ],\n\n \"produto\": [for($paymentMethods.composition)\n\n {\n\n \"codFormaPagamento\": uppercase(.billingTypeCode),\n\n \"code\": .code,\n\n \"flagJuros\": .isInterestRate,\n\n \"qtdeMaxParcelamento\": .maxInstallment,\n\n \"qtdeMinParcelamento\": .minInstallment,\n\n \"idFormaPagamento\": getBillingId(uppercase(.billingTypeCode), $paymentMethods).id\n\n }\n\n if(getBillingId(.billingTypeCode, $paymentMethods).id)\n\n ]\n\n }\n    </simple>\n</setHeader>\n<to uri=\"jslt:JSLTPaymentMethods\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]:payment = ${body}\" />\n<setHeader name=\"serviceUrl\">\n    <simple>{{PAYMENTS_METHODS_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<removeHeader headerName=\"errorMessage\">\n    <constant>errorMessage</constant>\n</removeHeader>\n<choice>\n    <when>\n\n <simple>${header.CamelHttpResponseCode} == 500</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Forma de pagamento indisponível</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <when>\n\n <simple>${header.CamelHttpResponseCode} == 404</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Não foi encontrada nenhuma forma de pagamento para essa oferta</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <when>\n\n <simple>${header.CamelHttpResponseCode} &gt; 399</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Forma de pagamento com problemas técnicos</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <otherwise></otherwise>\n</choice>\n<setHeader id=\"paymentOfferConverter\" name=\"CamelJsltString\">\n    <simple>\n\n def generateValue(value)\n\n [for($value)\n\n {\n\n \"amount\": .vlrTotal,\n\n \"currency\": .codMoeda,\n\n \"amountFormatted\": .vlrFormatado\n\n }\n\n ]\n\n def generateObject(payment)\n\n [for($payment.parcelamento)\n\n {\n\n \"sequenceGroup\" : .id,\n\n \"isBestPaymentDay\" : $payment.flagMelhorPagamento,\n\n \"isPrePayment\" : $payment.flagPagamentoAntecipado,\n\n \"installment\" : {\n\n \"quantity\" : .qtdeParcelas,\n\n \"totalIOFFirstInstallment\": generateValue(.vlrIOFPrimeiraParcela),\n\n \"totalIOFOtherInstallments\": generateValue(.vlrIOFDemaisParcelas),\n\n \"totalFirstInstallment\": generateValue(.vlrPrimeiraParcela),\n\n \"totalOtherInstallments\": generateValue(.vlrDemaisParcelas),\n\n \"totalPrice\": generateValue(.vlrTotal),\n\n \"totalFractionAdded\": generateValue(.vlrAdccFracionado)\n\n },\n\n \"billingType\" : {\n\n \"id\" : $payment.idFormaPagamento,\n\n \"code\" : uppercase($payment.codFormaPagamento),\n\n \"description\" : $payment.descricaoPagamento\n\n }\n\n }\n\n ]\n\n {\n\n \"service\" : .,\n\n \"formatted\" : flatten([for(.parcelamento)\n\n generateObject(.)\n\n ])\n\n }\n    </simple>\n</setHeader>\n<to uri=\"jslt:paymentOfferConverter\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]:converted = ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"responseOffer\">\n<from uri=\"direct:responseOffer\" />\n<setHeader name=\"CamelJsltString\">\n    <constant>\n\n def trimRight(valor, caracter)\n\n replace($caracter + $valor,\"^\" + $caracter + \"*\", \"\")\n\n def buildObject(array)\n\n {\n\n for($array) .[0] : .[1]\n\n }\n\n def addElements(object, newElements)\n\n let elements = flatten([[for($object) .key], [for($newElements) .key]])\n\n {\n\n for($elements) . : if(get-key($newElements, ., \"not-exists\") != \"not-exists\") get-key($newElements, .) else get-key($object, .)\n\n }\n\n def changeAttributes(transforms, item)\n\n let elements = [for($transforms)\n\n let transform = .\n\n if(string($transform.attribute.id) == string($item.id))\n\n [$transform.attribute.field, $transform.attribute.value]\n\n ]\n\n addElements($item, buildObject($elements))\n\n def removeTracing(key, value)\n\n if(is-array($value))  [ for($value) removeTracing(null, .) ]\n\n else if(is-object($value)) { for($value) .key : removeTracing(.key, .value) }\n\n else if($key == \"CamelJsltString\") null\n\n else $value\n\n def rpad(value, character, times)\n\n let array = ($times - size(string($value))) * (\"\" + $character)\n\n $value + $array\n\n def lpad(value, character, times)\n\n let array = ($times - size(string($value))) * (\"\" + $character)\n\n $array + $value\n\n def formatReal(valor)\n\n let valorSplited = split($valor,\"\\.\")\n\n let inteiro = if($valorSplited[0]==null)\"\" else $valorSplited[0]\n\n let decimais = if($valorSplited[1]==null)\",00\" else \",\"+rpad($valorSplited[1],\"0\",2)\n\n let valorReal = if($inteiro !=\"\") \"R$ \"+join(split($inteiro , \"(?=(?:...)*$)\"),\".\")+$decimais\n\n $valorReal\n\n def getResponse(payloadTracing, value)\n\n [for($payloadTracing.steps) (.) if(.name == $value)]\n\n def buscaBillingType(code)\n\n array([for($billingTypes) {\"id\": .id, \"description\": .description} if(uppercase($code)==uppercase(.code))])[0]\n\n def formatCoverages(coverages, calculus, key, adjust)\n\n [for($coverages)\n\n let classId = if(.classId) .classId else 31\n\n let id = .code\n\n let optionId = if($key == \"additionals\") .indemnityLimits[0].fields[0].options[0].code else \"not-code\"\n\n let adjustId = if($key == \"additionals\") array([for($adjust) .code if(.codeOri == $optionId)])[0] else \"not-code\"\n\n let values = array([for(get-key($calculus, $key))\n\n { \"premium\" : .premium, \"deductibleValue\" : .deductibleValue, \"details\" : .details, \"sumInsured\" : .sumInsured }\n\n if((contains(lpad(string(.id), \"0\", 4), [string($id), string($optionId), string($adjustId)]) or string(.sumInsuredTypeId) == string($id)) and string(.classId) == string($classId) )\n\n ])[0]\n\n {\n\n \"id\": .id,\n\n \"description\": .description,\n\n \"premiumValue\": formatAmountObject(if($values.premium) $values.premium else 0),\n\n \"deductibleValue\": formatAmountObject(if($values.deductibleValue) $values.deductibleValue else 0),\n\n \"deductibles\": [for(.deductibles)\n\n let deductibleId = .id\n\n let deductibleValue = array([ for($values.details) .deductibleValue if(.id == $deductibleId) ])[0]\n\n {\n\n \"id\": .id,\n\n \"description\": .description,\n\n \"value\": formatAmountObject(if($deductibleValue) $deductibleValue else 0)\n\n }\n\n ],\n\n \"indemnityLimits\" : formatValue(null, .indemnityLimits, $values, $adjust)\n\n }\n\n ]\n\n def getMenor(list, valor, index)\n\n if($list[$index])\n\n if(not($valor) or $valor &gt; $list[$index].lastDay)\n\n getMenor($list, $list[$index].lastDay, $index + 1)\n\n else\n\n getMenor($list, $valor, $index + 1)\n\n else\n\n $valor\n\n def getMaior(list, valor, index)\n\n if($list[$index])\n\n if(not($valor) or $valor &lt; $list[$index].lastDay)\n\n getMaior($list, $list[$index].lastDay, $index + 1)\n\n else\n\n getMaior($list, $valor, $index + 1)\n\n else\n\n $valor\n\n def formatValue(key, value, calculus, adjust)\n\n if(contains($key, [\"guarantees\",\"additionals\",\"accessories\"]))\n\n formatCoverages($value, $calculus, $key, $adjust)\n\n else if(contains($key, [\"defined\"]))\n\n {\n\n \"data\": string(if($calculus.sumInsured) $calculus.sumInsured else $value.data),\n\n \"unit\" : $value.unit\n\n }\n\n else if(contains($key, $keyException))\n\n $value\n\n else if(is-array($value))\n\n [for($value) formatValue(null, ., $calculus, $adjust) ]\n\n else if(is-object($value))\n\n { for($value) .key : formatValue(.key, .value, $calculus, $adjust) }\n\n else if(contains($key, $keyRemove))\n\n null\n\n else\n\n $value\n\n def formatAmountObject(value)\n\n {\n\n \"amount\": $value,\n\n \"currency\": \"R$\",\n\n \"amountFormatted\": formatReal($value)\n\n }\n\n def arredonda(valor, decimais)\n\n if($decimais == 0)\n\n round($valor)\n\n else\n\n let format = if(test($valor, \"\\.\")) string($valor) else $valor + \".\"\n\n let number = rpad($format, \"0\", size($format) + $decimais + 1)\n\n let values = capture(string($number), \"(?&lt;numeric&gt;^[0-9]*).(?&lt;double&gt;([0-9]{1,\"+ $decimais +\"}))(?&lt;last&gt;([0-9]{1}))\")\n\n let doubleValue = if(trimRight($values.double, \"0\")) trimRight($values.double, \"0\") else \"0\"\n\n let doubleArredonda = if($values.last) \"1\" else \"0\"\n\n let arredonda = lpad(number($doubleValue) + number($doubleArredonda), \"0\", $decimais)\n\n number($values.numeric + \".\" + $arredonda)\n\n let keyException = [\"range\", \"defined\", \"unit\"]\n\n let keyRemove    = [\"code\", \"classId\"]\n\n let quotationIdGeneration = getResponse(.payloadTracing, \"quotationIdGeneration\"\n   )[0].response.body\n\n let checkEntries\n   = getResponse(.payloadTracing, \"checkEntries\"\n\n     )[0].response.body\n\n let restrictionsBlackList = getResponse(.payloadTracing, \"restrictionsBlackList\"\n   )[0].response.body\n\n let dataClassification    = getResponse(.payloadTracing, \"dataClassification\"\n      )[0].response.body\n\n let enrich\n\n  = getResponse(.payloadTracing, \"enrich\"\n\n\n    )[0].response.body\n\n let calculus\n\n= getResponse(.payloadTracing, \"calculationOrchestrator\"\n )[0].response.body\n\n let paymentMethods\n = getResponse(.payloadTracing, \"paymentMethods\"\n\n   )[0].response.body\n\n let vehicleAndDue\n  = getResponse(.payloadTracing, \"generateMainVehicleDueQuotation\")[0].response.body\n\n let generateMainDates     = getResponse(.payloadTracing, \"generateMainDates\"\n\n)[0].response.body\n\n let vehicleQuestionnaire  = getResponse(.payloadTracing, \"36mvehicleQuestionnaire\"\n )[0].response.body\n\n let bestOffer\n      = getResponse(.payloadTracing, \"bestOffer\")[0].response.body\n\n let adjustAdditionals     = getResponse(.payloadTracing, \"adjustAdditionals\"\n\n)[0].response.body\n\n let codeAdjust\n     = array([for($adjustAdditionals.specification.transforms) . if(.attribute.field == \"code\")])\n\n let adjustedAdditionals   = array([for($bestOffer.additionals)\n\n let optionId = .indemnityLimits[0].fields[0].options[0].id\n\n let optionCode = .indemnityLimits[0].fields[0].options[0].code\n\n let before = {\n\n \"id\"\n  : if($optionId) $optionId else .id,\n\n \"codeOri\"    : if($optionCode) $optionCode else .code,\n\n \"code\"    : if($optionCode) $optionCode else .code,\n\n \"classId\"    : .classId\n\n }\n\n let changed = changeAttributes($codeAdjust, $before)\n\n $changed\n\n if($changed.codeOri != $changed.code)\n\n ])\n\n let coverages\n      = formatValue(null, $bestOffer, $calculus.responseCalculo.premium.items[0].coverage, $adjustedAdditionals)\n\n let billingTypes\n   = $checkEntries.offerInstallments.billingTypes\n\n let businessItem\n   = .request.body.search.businessItem\n\n let insuranceInput\n = $businessItem.insurance\n\n let vehicleInput\n   = $insuranceInput.autos[0].vehicle\n\n let periodEffectiveDateSpecificationMinimum  = \"CurrentDate-\"+$restrictionsBlackList.productParam.quotation.dayBlockCalculus+\"D\"\n\n let periodEffectiveDateSpecificationMaximum  = $checkEntries.calculusVersion.effectiveLimit\n\n let periodExpirationDateSpecificationMinimum = \"period.effectiveDate+\"+(if($restrictionsBlackList.productParam.periodRange.minimum == 0) 365 else $restrictionsBlackList.productParam.periodRange.minimum)+\"D\"\n\n let periodExpirationDateSpecificationMaximum = \"period.effectiveDate+\"+(if($restrictionsBlackList.productParam.periodRange.maximum == 0) 366 else $restrictionsBlackList.productParam.periodRange.maximum)+\"D\"\n\n let installmentDaySpecificationMinimum\n= \"period.effectiveDate+\"+getMenor($checkEntries.offerInstallments.bestPaymentDay, null, 0)+\"D\"\n\n let installmentDaySpecificationMaximum\n= \"period.effectiveDate+\"+getMaior($checkEntries.offerInstallments.bestPaymentDay, null, 0)+\"D\"\n\n let modelYear\n  = $vehicleAndDue.modelYear\n\n let manufacturingYear = $vehicleAndDue.yearManufacturing\n\n let licensePlate      = $vehicleAndDue.plateCode\n\n let chassisCode\n= $vehicleAndDue.chassisCode\n\n let seatCount\n  = if($enrich[0].seatCount) $enrich[0].seatCount\n\n else $dataClassification.vehicleModel.seatCount\n\n let fuelType\n   = if($enrich[0].fuel) $enrich[0].fuel\n\n else if($vehicleInput.model.fuelType) $vehicleInput.model.fuelType\n\n else $dataClassification.vehicleModel.fuelType\n\n let age\n\n = number(format-time(round(now()),\"yyyy\")) - $modelYear\n\n let calculusCoverage  = $calculus.responseCalculo.premium.items[0].coverage\n\n let deductibleValue\n   = {for($calculusCoverage.guarantees) \"value\" : .deductibleValue if(.deductibleValue &gt; 0)}\n\n let deductibleValueHdiRepair = {for($calculusCoverage.guarantees) \"value\" : .hdiRepairShopDeductibleValue if(.hdiRepairShopDeductibleValue &lt; 0)}\n\n let sumIof\n= $paymentMethods.service.iofPercentual * $calculus.totalPremium\n\n let totalPremium = arredonda(($calculus.totalPremium + $sumIof), 2)\n\n let vehicle = {\n\n \"chassisCode\":$chassisCode,\n\n \"manufactureYear\":$manufacturingYear,\n\n \"isNewVehicle\": $insuranceInput.autos[0].isNewVehicle == true,\n\n \"model\":{\n\n \"id\":$dataClassification.vehicleModel.code,\n\n \"year\":$modelYear,\n\n \"fuelType\":{\n\n \"id\":$fuelType.id,\n\n \"description\":$fuelType.description\n\n },\n\n \"description\":$dataClassification.vehicleModel.description,\n\n \"fipeCode\":$dataClassification.vehicleModel.fipeCode,\n\n \"seatingCapacity\":$seatCount,\n\n \"isInsurable\":$dataClassification.vehicleModel.isInsurable == 1,\n\n \"category\":{\n\n \"code\":$dataClassification.vehicleModel.category.code,\n\n \"description\":$dataClassification.vehicleModel.category.description\n\n },\n\n \"brand\":{\n\n \"description\":$dataClassification.vehicleModel.branch.description\n\n }\n\n },\n\n \"lisencePlateCode\":$licensePlate,\n\n \"age\": if($age &lt; 0) 0 else $age\n\n }\n\n let compositionTracings = {\n\n \"origin\" : \"offer\",\n\n \"startDate\" : .payloadTracing.startDate,\n\n \"endDate\" : .payloadTracing.endDate,\n\n \"steps\" : removeTracing(null, .payloadTracing.steps)\n\n }\n\n let alertVehicleZero = [\n\n {\n\n \"code\":\"001\",\n\n \"description\":if($insuranceInput.autos[0].isNewVehicle == true) \"Alerta: Veículo ZERO Km! O valor da I.S. não deverá ultrapassar o valor da Nota Fiscal\" else null,\n\n \"type\":\"warning\",\n\n \"origin\":\"offer\"\n\n }\n\n ]\n\n let alertRestricao   = [\n\n {\n\n \"code\":\"002\",\n\n \"description\":if($dataClassification.vehicleModel.isInsurable == 0) \"Existem restrições de contratação para o veículo. A efetivação do seguro deste veículo necessita da aprovação da HDI SEGUROS\" else null,\n\n \"type\":\"warning\",\n\n \"origin\":\"offer\"\n\n }\n\n ]\n\n let infoBuscaCNSEg   = [\n\n {\n\n \"code\":\"003\",\n\n \"description\": if($enrich.process == \"ignored\" and ($chassisCode or $licensePlate)) \"Considerado a informação do modelo enviado\" else null,\n\n \"type\":\"info\",\n\n \"origin\":\"offer\"\n\n }\n\n ]\n\n let businessNotifications = [for(flatten([$alertVehicleZero,$alertRestricao,$infoBuscaCNSEg])) . if(.description)]\n\n let paymentResponse = $paymentMethods.formatted\n\n let insurance = {\n\n \"quotationId\":$quotationIdGeneration.quotation.id,\n\n \"quotationDate\": $generateMainDates.quotationDate,\n\n \"quotationDueDate\":$vehicleAndDue.quotationDueDate,\n\n \"period\": $generateMainDates.period,\n\n \"installmentDay\": format-time(round(parse-time($generateMainDates.installmentDate, \"yyyy-MM-dd\")), \"dd\"),\n\n \"periodEffectiveDateSpecification\":{\n\n \"minimum\":$periodEffectiveDateSpecificationMinimum,\n\n \"maximum\":$periodEffectiveDateSpecificationMaximum\n\n },\n\n \"periodExpirationDateSpecification\":{\n\n \"minimum\":$periodExpirationDateSpecificationMinimum,\n\n \"maximum\":$periodExpirationDateSpecificationMaximum\n\n },\n\n \"installmentDaySpecification\":{\n\n \"minimum\":$installmentDaySpecificationMinimum,\n\n \"maximum\":$installmentDaySpecificationMaximum\n\n },\n\n \"discountOffer\":null,\n\n \"brokers\": [for($insuranceInput.brokers)\n\n {\n\n \"sucursalCode\": .sucursalCode,\n\n \"susepCode\": .susepCode,\n\n \"isMain\": .isMain,\n\n \"percentageCommission\": $vehicleAndDue.commission,\n\n \"percentageParticipation\": .percentageParticipation\n\n }\n\n ],\n\n \"items\":[\n\n {\n\n \"coverages\": if(is-array($coverages)) $coverages else [$coverages],\n\n \"questionnaire\":{\n\n \"questions\":[\n\n {\n\n \"id\":14,\n\n \"description\":\"Você utilizará o carro como motorista de aplicativo?\",\n\n \"category\":{\n\n \"id\":3,\n\n \"description\":\"option\"\n\n },\n\n \"options\":[\n\n {\n\n \"id\":2,\n\n \"description\":\"Não\"\n\n }\n\n ]\n\n },\n\n {\n\n \"id\":13,\n\n \"description\":\"Deseja estender a cobertura para condutor entre 18 a 25 anos\",\n\n \"category\":{\n\n \"id\":3,\n\n \"description\":\"option\"\n\n },\n\n \"options\":[\n\n {\n\n \"id\":2,\n\n \"description\":\"Não\"\n\n }\n\n ]\n\n }\n\n ]\n\n },\n\n \"auto\":{\n\n \"fipePercentageUsed\":$calculusCoverage.marketValueSumInsuredPerc,\n\n \"vehicle\":$vehicle\n\n },\n\n \"deductibleValue\": formatAmountObject(if($deductibleValue.value) $deductibleValue.value else 0) ,\n\n \"referencedRepairShopDeductibleValue\": formatAmountObject(if($deductibleValueHdiRepair.value) $deductibleValueHdiRepair.value else 0),\n\n \"totalNetPremium\": formatAmountObject(arredonda($calculus.totalPremium,2))\n\n }\n\n ],\n\n \"totalGrossPremium\": formatAmountObject(arredonda($calculus.totalPremium, 2)),\n\n \"cost\": formatAmountObject($paymentMethods.service.custo),\n\n \"totalIof\": formatAmountObject(arredonda($sumIof, 2)),\n\n \"total\": formatAmountObject(arredonda($totalPremium, 2)),\n\n \"paymentMethods\": $paymentResponse\n\n }\n\n [\n\n {\n\n \"compositionCode\" : \"433\",\n\n \"package\" : {\n\n \"id\": 1\n\n },\n\n \"businessNotifications\" : $businessNotifications,\n\n \"insurance\" : $insurance,\n\n \"compositionTracings\" : $compositionTracings\n\n }\n\n ]\n    </constant>\n</setHeader>\n<to uri=\"jslt:BodyJSLTResponse\" />   </route>   <route id=\"neurotech\" streamCache=\"false\">\n<from uri=\"direct:neurotech\" />\n<setHeader name=\"CamelHttpMethod\">\n    <constant>POST</constant>\n</setHeader>\n<setHeader name=\"codeTmp\">\n    <simple>205</simple>\n</setHeader>\n<setHeader name=\"id\">\n    <simple>5ea9d2213f159d24980e1945</simple>\n</setHeader>\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}</simple>\n</setHeader>\n<setHeader name=\"stepName\">\n    <constant>neurotech</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>11</constant>\n</setHeader>\n<setProperty name=\"throwException\">\n    <simple>{{THROW_NEUROTECH}}</simple>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:throwException ${exchangeProperty[throwException]}\" />\n<setProperty name=\"timeout\">\n    <simple>{{TIMEOUT_NEUROTECH}}</simple>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:timeout ${exchangeProperty[timeout]}\" />\n<doTry>\n    <setProperty name=\"companyId\">\n\n <simple>${env:COMPANY_ID}</simple>\n    </setProperty>\n    <setProperty name=\"sucursalCode\">\n\n <jsonpath>$.request.body.search.businessItem.insurance.brokers[?(@.isMain==true)].sucursalCode</jsonpath>\n    </setProperty>\n    <setProperty name=\"productCode\">\n\n <simple>${env:PRODUCT_CODE}</simple>\n    </setProperty>\n    <setProperty name=\"documentTypeId\">\n\n <jsonpath>$.request.body.prospect.documents[?(@.type.id==1)].type.id</jsonpath>\n    </setProperty>\n    <setProperty name=\"documentNumber\">\n\n <jsonpath>$.request.body.prospect.documents[?(@.type.id==1)].number</jsonpath>\n    </setProperty>\n    <setProperty name=\"postalCode\">\n\n <jsonpath>$.request.body.search.businessItem.insurance.autos..overnightPostalCode</jsonpath>\n    </setProperty>\n    <setProperty name=\"typeModelName\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.descriptionType</jsonpath>\n    </setProperty>\n    <setProperty name=\"modelName\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.description</jsonpath>\n    </setProperty>\n    <setProperty name=\"brandName\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.branch.description</jsonpath>\n    </setProperty>\n    <setProperty name=\"manufactureYear\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.yearManufacturing</jsonpath>\n    </setProperty>\n    <setProperty name=\"modelYear\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.modelYear</jsonpath>\n    </setProperty>\n    <setProperty name=\"chassisCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.chassisCode</jsonpath>\n    </setProperty>\n    <setProperty name=\"plateCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.plateCode</jsonpath>\n    </setProperty>\n    <setProperty name=\"isNew\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainVehicleDueQuotation\")]..body.isNewVehicle</jsonpath>\n    </setProperty>\n    <setProperty name=\"categoryName\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.category.description</jsonpath>\n    </setProperty>\n    <setProperty name=\"fipeCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.fipeCode</jsonpath>\n    </setProperty>\n    <setProperty name=\"regionCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.region.address.regionClass.code</jsonpath>\n    </setProperty>\n    <setProperty name=\"regionName\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.region.address.regionClass.description</jsonpath>\n    </setProperty>\n    <setProperty name=\"regionGroupCode\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.region.address.regionClass.group.code</jsonpath>\n    </setProperty>\n    <setProperty name=\"calculusDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..body.calculusVersion.calculusDate</jsonpath>\n    </setProperty>\n    <setProperty name=\"startDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainDates\")]..body.period.effectiveDate</jsonpath>\n    </setProperty>\n    <setProperty name=\"endDate\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"generateMainDates\")]..body.period.expirationDate</jsonpath>\n    </setProperty>\n    <setProperty name=\"quotationOperationId\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"dataClassification\")]..body.operation.id</jsonpath>\n    </setProperty>\n    <setBody>\n\n <simple>\n\n     {\n\n     \"input\" : ${body},\n\n     \"companyId\" : \"${exchangeProperty[companyId]}\",\n\n     \"sucursalCode\" : \"${exchangeProperty[sucursalCode]}\",\n\n     \"productCode\" : \"${exchangeProperty[productCode]}\",\n\n     \"documentTypeId\" : \"${exchangeProperty[documentTypeId]}\",\n\n     \"documentNumber\" : \"${exchangeProperty[documentNumber]}\",\n\n     \"postalCode\" : \"${exchangeProperty[postalCode]}\",\n\n     \"typeModelName\" : \"${exchangeProperty[typeModelName]}\",\n\n     \"modelName\" : \"${exchangeProperty[modelName]}\",\n\n     \"brandName\" : \"${exchangeProperty[brandName]}\",\n\n     \"manufactureYear\" : \"${exchangeProperty[manufactureYear]}\",\n\n     \"modelYear\" : \"${exchangeProperty[modelYear]}\",\n\n     \"chassisCode\" : \"${exchangeProperty[chassisCode]}\",\n\n     \"plateCode\" : \"${exchangeProperty[plateCode]}\",\n\n     \"isNew\" : \"${exchangeProperty[isNew]}\",\n\n     \"categoryName\" : \"${exchangeProperty[categoryName]}\",\n\n     \"fipeCode\" : \"${exchangeProperty[fipeCode]}\",\n\n     \"regionCode\" : \"${exchangeProperty[regionCode]}\",\n\n     \"regionName\" : \"${exchangeProperty[regionName]}\",\n\n     \"regionGroupCode\" : \"${exchangeProperty[regionGroupCode]}\",\n\n     \"calculusDate\" : \"${exchangeProperty[calculusDate]}\",\n\n     \"startDate\" : \"${exchangeProperty[startDate]}\",\n\n     \"endDate\" : \"${exchangeProperty[endDate]}\",\n\n     \"quotationOperationId\" : \"${exchangeProperty[quotationOperationId]}\"\n\n     }\n\n </simple>\n    </setBody>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\" />\n    <setHeader name=\"CamelJsltString\">\n\n <simple>\n\n     def getResponse(payloadTracing, value)\n\n     [for($payloadTracing.steps) (.) if(.name == $value)]\n\n     let quotationIdGeneration    = getResponse(.input.payloadTracing, \"quotationIdGeneration\"\n      )[0].response.body.quotation\n\n     let dataClassification    = getResponse(.input.payloadTracing, \"dataClassification\"\n      )[0].response.body\n\n     let internalBureauAnalitycsCliente = $dataClassification.client\n\n     let internalBureauAnalitycsVehicle = $dataClassification.vehicle\n\n     let bonusClass\n   =      if($internalBureauAnalitycsVehicle) $internalBureauAnalitycsVehicle.classBonusCode\n\n     else if($internalBureauAnalitycsCliente) $internalBureauAnalitycsCliente.classBonusCode\n\n     else \"00\"\n\n     let zeroKm = if(.isNew == \"1\") \"true\" else \"false\"\n\n     let documentType = if(.documentTypeId == \"1\") \"F\" else \"J\"\n\n     let quotationOperationId = if(.quotationOperationId == \"2\") \"2\" else \"1\"\n\n     let itemOperationId = if($quotationOperationId == \"2\") \"12\" else \"11\"\n\n     let keyParam = [\n\n     { \"name\" : \"m_cod_empresa\" , \"value\" : if(.companyId) .companyId else \"\" },\n\n     { \"name\" : \"m_cod_sucursal\" , \"value\" : if(.sucursalCode) .sucursalCode else \"\" },\n\n     { \"name\" : \"m_cod_produto\" , \"value\" : if(.productCode) .productCode else \"\" },\n\n     { \"name\" : \"m_pessoa\" , \"value\" : if(.documentTypeId) $documentType else \"\" },\n\n     { \"name\" : \"m_niv_bonus\" , \"value\" : $bonusClass },\n\n     { \"name\" : \"m_nom_tipo\" , \"value\" : if(.typeModelName) .typeModelName else \"\" },\n\n     { \"name\" : \"m_nom_modelo\" , \"value\" : if(.modelName) .modelName else \"\" },\n\n     { \"name\" : \"m_nom_marca\" , \"value\" : if(.brandName) .brandName else \"\" },\n\n     { \"name\" : \"m_ano_fabricacao\" , \"value\" : if(.manufactureYear) .manufactureYear else \"\" },\n\n     { \"name\" : \"m_ano_modelo\" , \"value\" : if(.modelYear) .modelYear else \"\" },\n\n     { \"name\" : \"m_chassis\" , \"value\" : if(.chassisCode) .chassisCode else \"\" },\n\n     { \"name\" : \"m_placa\" , \"value\" : if(.plateCode) .plateCode else \"\" },\n\n     { \"name\" : \"m_flg_zero\" , \"value\" : if(.isNew) $zeroKm else \"\" },\n\n     { \"name\" : \"m_nom_cateauto\" , \"value\" : if(.categoryName) .categoryName else \"\" },\n\n     { \"name\" : \"m_cod_refcotvei\" , \"value\" : if(.fipeCode) .fipeCode else \"\" },\n\n     { \"name\" : \"m_cod_classe\" , \"value\" : if(.regionCode) .regionCode else \"\" },\n\n     { \"name\" : \"m_nom_classe\" , \"value\" : if(.regionName) .regionName else \"\" },\n\n     { \"name\" : \"m_cod_grpclasse\" , \"value\" : if(.regionGroupCode) .regionGroupCode else \"\" },\n\n     { \"name\" : \"m_dat_calculo\" , \"value\" : if(.calculusDate) .calculusDate else \"\" },\n\n     { \"name\" : \"m_cpf_cnpj\" , \"value\" : if(.documentNumber) .documentNumber else \"\" },\n\n     { \"name\" : \"m_cep_item\" , \"value\" : if(.postalCode) .postalCode else \"\" },\n\n     { \"name\" : \"m_cep_circula\" , \"value\" : if(.postalCode) .postalCode else \"\" }\n\n     ]\n\n     {\n\n     \"requestId\" : $quotationIdGeneration.id,\n\n     \"policyFlow\": {\n\n     \"systemCode\": \"${env:SYSTEM_CODE}\",\n\n     \"companyCode\": .companyId,\n\n     \"branchOfficeCode\": .sucursalCode,\n\n     \"product\": {\n\n     \"code\": .productCode\n\n     },\n\n     \"quotation\": {\n\n     \"operation\": $quotationOperationId,\n\n     \"item\": {\n\n     \"action\": $itemOperationId\n\n     }\n\n     },\n\n     \"search\": if($documentType == \"F\") \"P\" else \"E\",\n\n     \"source\": \"${env:SOURCE_ID}\",\n\n     \"validityinitial\": .startDate,\n\n     \"validityEnd\": .endDate,\n\n     \"isSieve\": true\n\n     },\n\n     \"parameters\": [for($keyParam) . if(.value)]\n\n     }\n\n </simple>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTNeurotech\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:neurotech == ${body}\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <removeHeader headerName=\"errorMessage\" />\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on Neurotech Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<setHeader name=\"serviceUrl\">\n    <simple>{{NEUROTECH_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<doTry>\n    <setHeader name=\"CamelJsltString\">\n\n <constant>\n\n     {\n\n     \"operationCode\" : .operationCode,\n\n     \"message\": .message,\n\n     \"status\": .status,\n\n     \"result\": .result,\n\n     \"internalOperationCode\": .internalOperationCode,\n\n     \"flowParameters\": [for(.flowParameters) (.) if(not(.name == \"\") and not(.value == \"\"))]\n\n     }\n\n </constant>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTNeurotechResponse\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\" />\n    </doCatch>\n</doTry>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"error\" streamCache=\"false\">\n<from uri=\"direct:error\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${exception.getMessage}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]:Status ${header.CamelHttpResponseCode}\" />\n<choice>\n    <when>\n\n <simple>${header.errorMessage} != null</simple>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]:${header.errorMessage}\" />\n\n <setBody>\n\n     <simple>\n\n\n  { \"error\" : \"${header.errorMessage}\", \"traceId\" : \"${header.x-trace-id}\" }\n\n     </simple>\n\n </setBody>\n\n <setHeader name=\"CamelJsltString\">\n\n     <simple>\n\n\n  let errorDefault = [{ \"code\": \"452\", \"message\": .error }]\n\n\n  let traceId = .traceId\n\n\n  let exception = {\n\n\n  \"code\": string(\"452\"),\n\n\n  \"message\": \"Erro ao processar os dados\",\n\n\n  \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (${header.stepId})\",\n\n\n  \"errors\": [for(flatten([$errorDefault, .errors]))\n\n\n  {\n\n\n  \"code\": if(.code) .code else \"452\",\n\n\n  \"message\": if(.message) .message else \"Default Error Message\" ,\n\n\n  \"traceId\": if(.traceId) .traceId else $traceId\n\n\n  }\n\n\n  if(.)\n\n\n  ]\n\n\n  }\n\n\n  businessException($exception)\n\n     </simple>\n\n </setHeader>\n    </when>\n    <otherwise>\n\n <setBody>\n\n     <simple>\n\n\n  { \"error\" : \"${exception.getMessage}\", \"traceId\" : \"${header.x-trace-id}\" }\n\n     </simple>\n\n </setBody>\n\n <setHeader name=\"CamelJsltString\">\n\n     <simple>\n\n\n  let errorDefault = [{ \"code\": \"452\", \"message\": .error }]\n\n\n  let traceId = .traceId\n\n\n  let exception = {\n\n\n  \"code\": string(\"452\"),\n\n\n  \"message\": \"Erro ao processar os dados\",\n\n\n  \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (${header.stepId})\",\n\n\n  \"errors\": [for(flatten([$errorDefault, .errors]))\n\n\n  {\n\n\n  \"code\": if(.code) .code else \"452\",\n\n\n  \"message\": if(.message) .message else \"Default Error Message\" ,\n\n\n  \"traceId\": if(.traceId) .traceId else $traceId\n\n\n  }\n\n\n  if(.)\n\n\n  ]\n\n\n  }\n\n\n  businessException($exception)\n\n     </simple>\n\n </setHeader>\n    </otherwise>\n</choice>\n<to uri=\"jslt:BodyJSLTError\" />   </route>   <route id=\"generateMainBroker\">\n<from uri=\"direct:generateMainBroker\" />\n<setHeader name=\"stepName\">\n    <constant>generateMainBroker</constant>\n</setHeader>\nheadersIn headerse=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<setHeader name=\"stepId\">\n    <constant>12</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\" />\n<doTry>\n    <setProperty name=\"mainBrokerSusep\">\n\n <jsonpath>$..request.body..brokers[?(@.isMain==true)].susepCode</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:mainBrokerSusep ${exchangeProperty[mainBrokerSusep]}\" />\n    <setProperty name=\"brokers\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"restrictionsBlackList\")]..body.brokers</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:brokers ${exchangeProperty[brokers]}\" />\n    <setBody>\n\n <simple>\n\n     {\n\n     \"mainBrokerSusep\" : \"${exchangeProperty[mainBrokerSusep]}\",\n\n     \"brokers\" : ${exchangeProperty[brokers]}\n\n     }\n\n </simple>\n    </setBody>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:bodyBeforeJSLTGMB ${body}\" />\n    <setHeader name=\"CamelJsltString\">\n\n <constant>\n\n     def concatZero(valor, length)\n\n     if(size(string($valor)) &lt; $length) concatZero(\"0\" + $valor, $length) else $valor\n\n     let susepCode = .mainBrokerSusep\n\n     let brokersArray = if(size(.brokers) &gt; 0) .brokers[0] else []\n\n     let brokerMain = [ for($brokersArray) (.) if(.susepCode == $susepCode) ]\n\n     {\n\n     \"brokerInternalCode\" : concatZero(string($brokerMain[0].id), 9),\n\n     \"brokerInternalType\" : $brokerMain[0].type.description\n\n     }\n\n </constant>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTGMB\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:bodyAfterJSLTGMB ${body}\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on Get Broker Information Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route xmlns=\"http://camel.apache.org/schema/spring\" id=\"generateMainVehicleDueQuotation\">\n<from uri=\"direct:generateMainVehicleDueQuotation\" />\n<setHeader name=\"stepName\">\n    <constant>generateMainVehicleDueQuotation</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>13</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\" />\n<doTry>\n    <setHeader name=\"inputCommision\">\n\n <jsonpath>$..request.body..brokers[?(@.isMain==true)].percentageCommission</jsonpath>\n    </setHeader>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:inputCommision == ${header.inputCommision}\" />\n    <setProperty name=\"maxParamComission\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"restrictionsBlackList\")]..productParam.comissionRange.maximum</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:maxParamComission == ${exchangeProperty[maxParamComission]}\" />\n    <setProperty name=\"minParamComission\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"restrictionsBlackList\")]..productParam.comissionRange.minimum</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:minParamComission == ${exchangeProperty[minParamComission]}\" />\n    <setProperty name=\"defaultCommission\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..brokersDefault.percentageCommission</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:defaultCommission == ${exchangeProperty[defaultCommission]}\" />\n    <setProperty name=\"agreementCommission\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..brokerAgreement.percentageCommission</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:agreementCommission == ${exchangeProperty[agreementCommission]}\" />\n    <setProperty name=\"stipulatingCommision\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..stipulating..sumPercentageComission</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:stipulatingCommision == ${exchangeProperty[stipulatingCommision]}\" />\n    <setProperty name=\"isNew\">\n\n <jsonpath>$.request..body..businessItem..isNewVehicle</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:ISNEW ========== ${exchangeProperty[isNew]}\" />\n    <setProperty name=\"blockDays\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"restrictionsBlackList\")]..body..quotation.dayBlockCalculus</jsonpath>\n    </setProperty>\n    <setProperty name=\"lastYear\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..body..autoParam.lastYear</jsonpath>\n    </setProperty>\n    <setProperty name=\"minimumManufactureYear\">\n\n <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..body..autoParam.minimumManufactureYear</jsonpath>\n    </setProperty>\n    <setHeader name=\"CamelJsltString\">\n\n <constant>\n\n     def plusDays(date, days)\n\n     format-time(round(parse-time($date, \"yyyy-MM-dd\")) + $days * 60 * 60 * 24, \"yyyy-MM-dd\")\n\n     def dateBefore(date, dateCompare)\n\n     round(parse-time($date, \"yyyy-MM-dd\")) &lt; round(parse-time($dateCompare, \"yyyy-MM-dd\"))\n\n     def dateAfter(date, dateCompare)\n\n     round(parse-time($date, \"yyyy-MM-dd\")) &gt; round(parse-time($dateCompare, \"yyyy-MM-dd\"))\n\n     def dateEqual(date, dateCompare)\n\n     round(parse-time($date, \"yyyy-MM-dd\")) == round(parse-time($dateCompare, \"yyyy-MM-dd\"))\n\n     def getProcess(payloadTracingSteps, process)\n\n     [for($payloadTracingSteps) (.) if(.name == $process)]\n\n     let auto = .request.body.search.businessItem.insurance.autos[0]\n\n     let percentageCommission = array([for(.request.body.search.businessItem.insurance.brokers) . if(.isMain == true)])[0].percentageCommission\n\n     let enrich = getProcess(.payloadTracing.steps, \"enrich\")[0]\n\n     let checkEntries = getProcess(.payloadTracing.steps, \"checkEntries\")[0].response.body\n\n     let restrictionsBlackList = getProcess(.payloadTracing.steps, \"restrictionsBlackList\")[0].response.body\n\n     let vehicleCNSEG = $enrich.response.body[0]\n\n     let plateCode = if($auto.vehicle.licensePlateCode) $auto.vehicle.licensePlateCode else $vehicleCNSEG.plateCode\n\n     let chassisCode = if($auto.vehicle.chassisCode) $auto.vehicle.chassisCode else $vehicleCNSEG.chassisCode\n\n     let modelYear = number(if($auto.vehicle.model.year) $auto.vehicle.model.year else $vehicleCNSEG.yearModel)\n\n     let yearManufacturing = number(if($auto.vehicle.manufactureYear) $auto.vehicle.manufactureYear else $vehicleCNSEG.yearManufacture)\n\n     let newYearIsValid = if($auto.isNewVehicle and $auto.isNewVehicle == true and $modelYear &lt; $checkEntries.autoParam.lastYear) false else true\n\n     let manufacturingYearIsValid = if($yearManufacturing &lt; $checkEntries.autoParam.minimumManufactureYear) false else true\n\n     let stipulanting = $checkEntries.stipulating.unit.agreement.sumPercentageComission\n\n     let commissionInput = if(not($percentageCommission) or $percentageCommission == \"\") 0 else number($percentageCommission)\n\n     let commissionDefault = if($checkEntries.brokersDefault.percentageCommission == \"\" or not($checkEntries.brokersDefault.percentageCommission)) 0 else number($checkEntries.brokersDefault.percentageCommission) * 100\n\n     let stipulatingCommision = if($stipulanting == \"\" or not($stipulanting)) 0 else number($stipulanting) * 100\n\n     let agreementCommission = if($checkEntries.brokerAgreement.percentageCommission == \"\" or not($checkEntries.brokerAgreement.percentageCommission)) 0 else number($checkEntries.brokerAgreement.percentageCommission) * 100\n\n     let maxCommission = if($agreementCommission == 0) number($restrictionsBlackList.productParam.comissionRange.maximum) * 100 else $agreementCommission\n\n     let minCommission = number($restrictionsBlackList.productParam.comissionRange.minimum) * 100\n\n     let validateInput = if($commissionInput &gt; 0 and $commissionInput &lt;= $maxCommission and $commissionInput &gt;= $minCommission)\n\n     $commissionInput\n\n     else if($commissionInput &lt;= $agreementCommission and $agreementCommission &gt; 0)\n\n     $commissionInput\n\n     else 15\n\n     let commission =      if(not($stipulatingCommision &lt;= 0)) $stipulatingCommision\n\n     else if(not($commissionInput &lt;= 0)) $validateInput\n\n     else if(not($agreementCommission &lt;= 0)) $agreementCommission\n\n     else if(not($commissionDefault &lt;= 0)) $commissionDefault\n\n     else 15\n\n     let calculusDueDate = format-time(round(now()) + (60 * 60 * 24 * $restrictionsBlackList.productParam.quotation.dayBlockCalculus), \"yyyy-MM-dd\")\n\n     let quotationDueDate = if(dateBefore($calculusDueDate, $checkEntries.calculusVersion.webLimit)) $checkEntries.calculusVersion.webLimit else $calculusDueDate\n\n     {\n\n     \"isNewVehicle\": if($auto.isNewVehicle) 1 else 0,\n\n     \"yearManufacturing\": $yearManufacturing,\n\n     \"modelYear\": $modelYear,\n\n     \"plateCode\" : if($plateCode) $plateCode else \"\",\n\n     \"chassisCode\" : if($chassisCode) $chassisCode else \"\",\n\n     \"quotationDueDate\" : $quotationDueDate,\n\n     \"newYearIsValid\" : $newYearIsValid,\n\n     \"manufacturingYearIsValid\" : $manufacturingYearIsValid,\n\n     \"commission\" : $commission\n\n     }\n\n </constant>\n    </setHeader>\n    <to uri=\"jslt:BodyJSLTGMV\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:BodyJSLTGMV ${body}\" />\n    <setProperty name=\"newYearIsValid\">\n\n <jsonpath>$.newYearIsValid</jsonpath>\n    </setProperty>\n    <setProperty name=\"manufacturingYearIsValid\">\n\n <jsonpath>$.manufacturingYearIsValid</jsonpath>\n    </setProperty>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:${exchangeProperty[newYearIsValid]}\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:${exchangeProperty[manufacturingYearIsValid]}\" />\n    <doCatch>\n\n <exception>java.lang.Exception</exception>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Error on Get Vehicle Information Process</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </doCatch>\n</doTry>\n<choice>\n    <when>\n\n <simple>${exchangeProperty[newYearIsValid]} == false &amp;&amp; ${exchangeProperty[manufacturingYearIsValid]} == false</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Model's Year and Manufacture's Year is incorrect</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <when>\n\n <simple>${exchangeProperty[manufacturingYearIsValid]} == false</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Manufacture's Year is incorrect</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n    <when>\n\n <simple>${exchangeProperty[newYearIsValid]} == false</simple>\n\n <setHeader name=\"errorMessage\">\n\n     <constant>Model's Year is incorrect</constant>\n\n </setHeader>\n\n <to uri=\"direct:error\" />\n    </when>\n</choice>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"generateMainDates\">\n<from uri=\"direct:generateMainDates\" />\n<setHeader name=\"stepName\">\n    <constant>generateMainDates</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>14</constant>\n</setHeader>\n<setHeader name=\"CamelJsltString\">\n    <simple>\n\n def trimRight(valor, caracter)\n\n replace($caracter + $valor,\"^\" + $caracter + \"*\", \"\")\n\n def lpad(value, character, times)\n\n let array = ($times - size(string($value))) * (\"\" + $character)\n\n $array + $value\n\n def concatZero(valor, length)\n\n if(size($valor) &lt; $length)\n\n concatZero(\"0\" + $valor, $length)\n\n else\n\n $valor\n\n def generateDate(day)\n\n if(number(trimRight(\"0\" + format-time(round(now()), \"dd\"), \"0\")) &gt; number(trimRight(\"0\" + $day, \"0\")))\n\n format-time(round(now()), \"yyyy\") + \"-\" + lpad(number(trimRight(\"0\" + format-time(round(now()), \"MM\"), \"0\")) + 1, \"0\", 2) + \"-\" + lpad($day, \"0\", 2)\n\n else\n\n format-time(round(now()), \"yyyy\") + \"-\" + format-time(round(now()), \"MM\") + \"-\" + $day\n\n def nextYear()\n\n let proxYear = string(number(format-time(round(now()),\"yyyy\")) + 1)\n\n let monthAux = number(format-time(round(now()),\"M\"))\n\n let dayAux = number(format-time(round(now()),\"d\"))\n\n let proxMonth = if($monthAux == 2 and $dayAux == 29) 3 else $monthAux\n\n let proxDay = if($monthAux == 2 and $dayAux == 29) 1 else $dayAux\n\n $proxYear + \"-\" + concatZero(string($proxMonth),2) + \"-\" + concatZero(string($proxDay),2)\n\n def plusDay(date, days)\n\n format-time(round(parse-time($date,\"yyyy-MM-dd\")) + $days * 24 * 60 * 60, \"dd\")\n\n let businessItem\n\n     = .request.body.search.businessItem\n\n let insuranceInput\n\n   = $businessItem.insurance\n\n let effectiveDate\n\n    = if($insuranceInput.period.effectiveDate ) $insuranceInput.period.effectiveDate  else format-time(round(now()),\"yyyy-MM-dd\")\n\n let installmentDate\n\n  = generateDate(if($insuranceInput.installmentDay) $insuranceInput.installmentDay else plusDay($effectiveDate, 7))\n\n {\n\n \"period\" : {\n\n \"effectiveDate\" : $effectiveDate,\n\n \"expirationDate\": if($insuranceInput.period.expirationDate) $insuranceInput.period.expirationDate else nextYear()\n\n },\n\n \"installmentDate\": $installmentDate,\n\n \"quotationDate\" : format-time(parse-time(replace(format-time(now(), \"yyyy-MM-dd'T'HH:mm:ssZ\"),\"\\+0000\",\"+0300\"),\"yyyy-MM-dd'T'HH:mm:ssZ\"),\"yyyy-MM-dd\")\n\n }\n    </simple>\n</setHeader>\n<to uri=\"jslt:BodyJSLTGMD\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]:datas geradas == ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"restrictionAndDate\">\n<from uri=\"direct:restrictionAndDate\" />\n<setHeader name=\"stepName\">\n    <constant>restrictionAndDate</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>15</constant>\n</setHeader>\n<multicast parallelProcessing=\"true\" stopOnAggregateException=\"true\" stopOnException=\"true\" strategyMethodName=\"aggregate\" strategyRef=\"multicastStrategy\">\n    <to uri=\"direct:generateMainDates\" />\n    <to uri=\"direct:restrictionsBlackList\" />\n</multicast>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"quotationIdGeneration\">\n<from uri=\"direct:quotationIdGeneration\" />\n<setHeader name=\"stepName\">\n    <constant>quotationIdGeneration</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>16</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${date:now:yyyy-MM-dd'T'HH:mm:ss.SSS} - [best-offer]: Start Generation Quotation Id ${body}\" />\n<setHeader name=\"codeTmp\">\n    <constant>409</constant>\n</setHeader>\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}&amp;sequenceName=sqslsofferoneclickquotationid</simple>\n</setHeader>\n<setHeader name=\"CamelHttpMethod\">\n    <constant>GET</constant>\n</setHeader>\n<setHeader name=\"serviceUrl\">\n    <simple>{{QUOTATION_ID_GENERATION}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"callService\" streamCache=\"false\">\n<from uri=\"direct:callService\"/>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${header.stepName} url :: ${header.serviceUrl}\"/>\n<filter>\n    <simple>${exchangeProperty[throwException]} == null</simple>\n    <setProperty name=\"throwException\">\n\n <simple>{{THROW_DEFAULT}}</simple>\n    </setProperty>\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:throwException ${exchangeProperty[throwException]}\"/>\n<filter>\n    <simple>${exchangeProperty[timeout]} == null</simple>\n    <setProperty name=\"timeout\">\n\n <simple>{{TIMEOUT_DEFAULT}}</simple>\n    </setProperty>\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:timeout ${exchangeProperty[timeout]}\"/>\n<doTry>\n    <toD uri=\"${header.serviceUrl}?throwExceptionOnFailure=${exchangeProperty[throwException]}&amp;socketTimeout=${exchangeProperty[timeout]}\"/>\n    <doCatch>\n\n <exception>org.apache.camel.http.common.HttpOperationFailedException</exception>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]: HttpOperationFailedException\"/>\n\n <setBody>\n\n     <simple> { \"error\" : ${exception.responseBody} ,  \"stepName\" : \"${header.stepId}\", \"statusCode\" : \"${exception.statusCode}\", \"traceId\" : \"${header.x-trace-id}\", \"stepId\" : \"${header.stepId}\"  }</simple>\n\n </setBody>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]:${body}\"/>\n\n <choice>\n\n     <when>\n\n\n  <simple>${exception.statusCode} == 503</simple>\n\n\n  <setBody>\n\n\n      <simple>\n\n\n\n   { \"errorMsg\" : \"${body}\", \"traceId\" : \"${header.x-trace-id}\", \"stepId\" : \"${header.stepId}\"  }\n\n\n      </simple>\n\n\n  </setBody>\n\n\n  <setHeader name=\"CamelJsltString\">\n\n\n      <simple>\n\n\n\n   let errorDefault = [{ \"code\": 503, \"message\": \"Serviço Indisponivel\" }]\n\n\n\n   let errorTratado =      if(.stepId == \"8\") [{ \"code\": 500, \"message\": \"Melhor Oferta está com problemas técnicos\" }]\n\n\n\n   else if(.stepId == \"9\") [{ \"code\": 500, \"message\": \"Orquestrador de Calculo está com problemas técnicos\" }]\n\n\n\n   else if(.stepId == \"10\") [{ \"code\": 500, \"message\": \"Forma de pagamento está com problemas técnicos\" }]\n\n\n\n   else null\n\n\n\n   let traceId = .traceId\n\n\n\n   let exception = {\n\n\n\n   \"code\": string(.serviceReturn.statusCode),\n\n\n\n   \"message\": \"Erro ao processar os dados (\" + .stepId + \")\" ,\n\n\n\n   \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (\" + .stepId + \")\",\n\n\n\n   \"errors\": [for(flatten([$errorDefault, .serviceReturn.errors, $errorTratado]))\n\n\n\n   {\n\n\n\n   \"nativeMessage\" : .nativeMessage,\n\n\n\n   \"code\" : .code,\n\n\n\n   \"message\" : .message,\n\n\n\n   \"traceId\" : if(.traceId) .traceId else $traceId\n\n\n\n   }\n\n\n\n   if(.)\n\n\n\n   ]\n\n\n\n   }\n\n\n\n   businessException($exception)\n\n\n      </simple>\n\n\n  </setHeader>\n\n\n  <to uri=\"jslt:BodyJSLTServiceStatus503\"/>\n\n     </when>\n\n     <when>\n\n\n  <simple>${exception.statusCode} &gt; 499</simple>\n\n\n  <log message=\"[${header.stepName}][${header.x-trace-id}]: StatusCode ${exception.statusCode}\"/>\n\n\n  <setBody>\n\n\n      <simple>\n\n\n\n   { \"serviceReturn\" : ${body}, \"traceId\" : \"${header.x-trace-id}\", \"stepId\" : \"${header.stepId}\"  }\n\n\n      </simple>\n\n\n  </setBody>\n\n\n  <setHeader name=\"CamelJsltString\">\n\n\n      <simple>\n\n\n\n   let errorDefault = [{ \"code\": .serviceReturn.statusCode, \"message\": .serviceReturn.error.message }]\n\n\n\n   let errorTratado =      if(.stepId == \"8\") [{ \"code\": 500, \"message\": \"Melhor Oferta está com problemas técnicos\" }]\n\n\n\n   else if(.stepId == \"9\") [{ \"code\": 500, \"message\": \"Orquestrador de Calculo está com problemas técnicos\" }]\n\n\n\n   else if(.stepId == \"10\") [{ \"code\": 500, \"message\": \"Forma de pagamento está com problemas técnicos\" }]\n\n\n\n   else null\n\n\n\n   let traceId = .traceId\n\n\n\n   let exception = {\n\n\n\n   \"code\": string(.serviceReturn.statusCode),\n\n\n\n   \"message\": \"Erro ao processar os dados (\" + .stepId + \")\" ,\n\n\n\n   \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (\" + .stepId + \")\",\n\n\n\n   \"errors\": [for(flatten([$errorDefault, .serviceReturn.errors, $errorTratado]))\n\n\n\n   {\n\n\n\n   \"nativeMessage\" : .nativeMessage,\n\n\n\n   \"code\" : .code,\n\n\n\n   \"message\" : .message,\n\n\n\n   \"traceId\" : if(.traceId) .traceId else $traceId\n\n\n\n   }\n\n\n\n   if(.)\n\n\n\n   ]\n\n\n\n   }\n\n\n\n   businessException($exception)\n\n\n      </simple>\n\n\n  </setHeader>\n\n\n  <to uri=\"jslt:BodyJSLTServiceStatus\"/>\n\n     </when>\n\n     <otherwise>\n\n\n  <log message=\"[${header.stepName}][${header.x-trace-id}]: Otherwise\"/>\n\n\n  <setBody>\n\n\n      <simple>\n\n\n\n   { \"serviceReturn\" : ${body}, \"traceId\" : \"${header.x-trace-id}\", \"stepId\" : \"${header.stepId}\"  }\n\n\n      </simple>\n\n\n  </setBody>\n\n\n  <setHeader name=\"CamelJsltString\">\n\n\n      <simple>\n\n\n\n   let errorDefault = [{ \"code\": string(.serviceReturn.error.code), \"message\": .serviceReturn.error.message, \"nativeMessage\" : .serviceReturn.error.description }]\n\n\n\n   let errorTratado =      if(.stepId == \"8\") [{ \"code\": 500, \"message\": \"Melhor Oferta está com problemas técnicos\" }]\n\n\n\n   else if(.stepId == \"9\") [{ \"code\": 500, \"message\": \"Orquestrador de Calculo está com problemas técnicos\" }]\n\n\n\n   else if(.stepId == \"10\") [{ \"code\": 500, \"message\": \"Forma de pagamento está com problemas técnicos\" }]\n\n\n\n   else null\n\n\n\n   let traceId = .traceId\n\n\n\n   let exception = {\n\n\n\n   \"code\": string(.serviceReturn.error.code),\n\n\n\n   \"message\": \"Erro ao processar os dados (\" + .stepId + \")\" ,\n\n\n\n   \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (\" + .stepId + \")\",\n\n\n\n   \"errors\": [for(flatten([$errorDefault, .serviceReturn.error.errors, $errorTratado]))\n\n\n\n   {\n\n\n\n   \"nativeMessage\" : .nativeMessage,\n\n\n\n   \"code\" : .code,\n\n\n\n   \"message\" : .message,\n\n\n\n   \"traceId\" : if(.traceId) .traceId else $traceId\n\n\n\n   }\n\n\n\n   if(.)\n\n\n\n   ]\n\n\n\n   }\n\n\n\n   businessException($exception)\n\n\n      </simple>\n\n\n  </setHeader>\n\n\n  <to uri=\"jslt:BodyJSLTServiceException\"/>\n\n     </otherwise>\n\n </choice>\n    </doCatch>\n    <doCatch>\n\n <exception>java.net.SocketTimeoutException</exception>\n\n <log message=\"[${header.stepName}][${header.x-trace-id}]: SocketTimeoutException\"/>\n\n <setBody>\n\n     <simple>{ \"Error\" : \"timedOut\", \"traceId\" : \"${header.x-trace-id}\", \"stepId\" : \"${header.stepId}\" }</simple>\n\n </setBody>\n\n <setHeader name=\"CamelJsltString\">\n\n     <simple>\n\n\n  let errorDefault = [{ \"code\": string(\"452\"), \"message\": \"Desculpe pelo erro sistêmico. A HDI está trabalhando para resolve-lo o mais breve possível.\"  }]\n\n\n  let errorTratado =      if(.stepId == \"8\") [{ \"code\": 500, \"message\": \"Melhor Oferta indisponível\" }]\n\n\n  else if(.stepId == \"9\") [{ \"code\": 500, \"message\": \"Orquestrador de Calculo indisponível\" }]\n\n\n  else if(.stepId == \"10\") [{ \"code\": 500, \"message\": \"Forma de pagamento indisponível\" }]\n\n\n  else null\n\n\n  let traceId = .traceId\n\n\n  let exception = {\n\n\n  \"code\": string(452),\n\n\n  \"message\": \"Erro ao processar os dados (\" + .stepId + \")\" ,\n\n\n  \"description\": \"Não foi possível gravar as ofertas, confira os erros abaixo (\" + .stepId + \")\",\n\n\n  \"errors\": [for(flatten([$errorDefault, .errors, $errorTratado]))\n\n\n  {\n\n\n  \"nativeMessage\" : .nativeMessage,\n\n\n  \"code\" : .code,\n\n\n  \"message\" : .message,\n\n\n  \"traceId\" : if(.traceId) .traceId else $traceId\n\n\n  }\n\n\n  if(.)\n\n\n  ]\n\n\n  }\n\n\n  businessException($exception)\n\n     </simple>\n\n </setHeader>\n\n <filter>\n\n     <simple>${exchangeProperty[throwException]} == true || ${exchangeProperty[throwException]} == \"true\"</simple>\n\n     <to uri=\"jslt:BodyJSLTServiceTimeOut\"/>\n\n </filter>\n    </doCatch>\n</doTry>\n<filter>\n    <simple>${header.CamelHttpResponseCode} &lt; 300</simple>\n    <setHeader name=\"CamelJsltString\">\n\n <constant>.</constant>\n    </setHeader>\n    <to uri=\"jslt:jsltCallServiceSuccess\"/>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:responseService ${body}\"/>\n</filter>\n<removeProperty propertyName=\"timeout\"/>\n<removeProperty propertyName=\"throwException\"/>   </route>   <route id=\"splitCalculo\" streamCache=\"false\">\n<from uri=\"direct:splitCalculo\" />\n<setHeader name=\"stepName\">\n    <constant>splitCalculo</constant>\n</setHeader>\nheadersIn headerse=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<setHeader name=\"stepId\">\n    <constant>17</constant>\n</setHeader>\n<setHeader name=\"CamelJsltString\">\n    <constant>\n\n let body = .\n\n let notBestOffer = [for($body.payloadTracing.steps) . if(not(.name == \"bestOffer\"))]\n\n let bestOffer = array([for($body.payloadTracing.steps) . if(.name == \"bestOffer\")])[0]\n\n let response = [for($bestOffer.response.body.coverages)\n\n let coverageId = .id\n\n let continueBestOffer = {\n\n \"index\": $bestOffer.index,\n\n \"name\" : $bestOffer.name,\n\n \"startDate\" : $bestOffer.startDate,\n\n \"endDate\" : $bestOffer.endDate,\n\n \"response\" : {\n\n \"headers\" : $bestOffer.response.headers,\n\n \"body\" : {\n\n \"id\": $bestOffer.response.body.id,\n\n \"code\": $bestOffer.response.body.code,\n\n \"description\": $bestOffer.response.body.description,\n\n \"coverages\": [for($bestOffer.response.body.coverages) . if(.id == $coverageId)]\n\n }\n\n }\n\n }\n\n {\n\n \"request\" : $body.request,\n\n \"payloadTracing\" : {\n\n \"startDate\" : $body.payloadTracing.startDate,\n\n \"endDate\" : $body.payloadTracing.endDate,\n\n \"steps\" : flatten([$notBestOffer,$continueBestOffer])\n\n }\n\n }\n\n ]\n\n join($response,\"tokenizeSplit\")\n    </constant>\n</setHeader>\n<to uri=\"jslt:splitOrquestrador\" />\n<transform>\n    <simple>${body.substring(1)}</simple>\n</transform>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:tokenizeSplit ==&gt; ${body}\" />\n<split parallelProcessing=\"true\" strategyMethodName=\"aggregate\" strategyRef=\"multicastStrategy\">\n    <tokenize token=\"tokenizeSplit\" />\n    <setBody>\n\n <simple>\"${body}\"</simple>\n    </setBody>\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:beforeCall ${body}\" />\n    <setHeader name=\"CamelJsltString\">\n\n <constant>from-json(.)</constant>\n    </setHeader>\n    <to uri=\"jslt:transformOrquestrador\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:beforeCall Parsed ${body}\" />\n    <to uri=\"direct:calculationOrchestrator\" />\n    <log message=\"[${header.stepName}][${header.x-trace-id}]:return split ${body}\" />\n</split>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:return joined ${body}\" />\n<setHeader name=\"CamelJsltString\">\n    <constant>{ \"joinCalculusResponse\" : [for(.) (.response.body) ] }</constant>\n</setHeader>\n<to uri=\"jslt:joinOrquestrador\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]:return ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"bestOfferRoute\">\n<from uri=\"direct:bestOfferRoute\" />\n<setHeader name=\"stepName\">\n    <constant>bestOfferRoute</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>20</constant>\n</setHeader>\n<multicast parallelProcessing=\"true\" stopOnAggregateException=\"true\" stopOnException=\"true\" strategyMethodName=\"aggregate\" strategyRef=\"multicastStrategy\">\n    <to uri=\"direct:bestOffer\" />\n</multicast>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"vehicleQuestionnaire\">\n<from uri=\"direct:vehicleQuestionnaire\" />\n<setHeader name=\"stepName\">\n    <constant>vehicleQuestionnaire</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>21</constant>\n</setHeader>\n<setProperty name=\"postalCode\">\n    <jsonpath>$.request.body..overnightPostalCode</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:postalCode ${exchangeProperty[postalCode]}\" />\n<setProperty name=\"categoryCode\">\n    <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.category.code</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:categoryCode ${exchangeProperty[categoryCode]}\" />\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}&amp;postalCode=${exchangeProperty[postalCode]}&amp;questionaryType=1&amp;vehicleCategory=${exchangeProperty[categoryCode]}</simple>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${header.CamelHttpQuery}\" />\n<setProperty name=\"throwException\">\n    <simple>{{THROW_QUESTIONNAIRE}}</simple>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:throwException ${exchangeProperty[throwException]}\" />\n<setHeader name=\"serviceUrl\">\n    <simple>{{QUESTIONNAIRE_URL}}</simple>\n</setHeader>\n<setHeader name=\"CamelHttpPath\">\n    <simple>{{QUESTIONNAIRE_PATH}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<filter>\n    <simple>${header.CamelHttpResponseCode} &lt; 399</simple>\n    <setHeader name=\"CamelJsltString\">\n\n <constant>\n\n     {\n\n     \"questionnaire\" : {\n\n     \"questions\": [for(.compositions.questionnaire.questions)\n\n     {\n\n     \"id\" : .id,\n\n     \"code\" : .code,\n\n     \"description\" : .description,\n\n     \"category\": .category,\n\n     \"options\": [for(.options)\n\n     {\n\n     \"id\": .id,\n\n     \"code\": .code,\n\n     \"description\": .description\n\n     }\n\n     if(.id == 2)\n\n     ],\n\n     \"range\": .range\n\n     }\n\n     ]\n\n     }\n\n     }\n\n </constant>\n    </setHeader>\n    <to uri=\"jslt:vehicleQuestionnaire\" />\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: response ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"driverQuestionnaire\">\n<from uri=\"direct:driverQuestionnaire\" />\n<setHeader name=\"stepName\">\n    <constant>driverQuestionnaire</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>22</constant>\n</setHeader>\n<setProperty name=\"postalCode\">\n    <jsonpath>$.request.body..overnightPostalCode</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:postalCode ${exchangeProperty[postalCode]}\" />\n<setProperty name=\"categoryCode\">\n    <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.category.code</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:categoryCode ${exchangeProperty[categoryCode]}\" />\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}&amp;postalCode=${exchangeProperty[postalCode]}&amp;questionaryType=2&amp;vehicleCategory=${exchangeProperty[categoryCode]}</simple>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${header.CamelHttpQuery}\" />\n<setHeader name=\"serviceUrl\">\n    <simple>{{QUESTIONNAIRE_URL}}</simple>\n</setHeader>\n<setProperty name=\"throwException\">\n    <simple>{{THROW_QUESTIONNAIRE}}</simple>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:throwException ${exchangeProperty[throwException]}\" />\n<setHeader name=\"CamelHttpPath\">\n    <simple>{{QUESTIONNAIRE_PATH}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<filter>\n    <simple>${header.CamelHttpResponseCode} &lt; 399</simple>\n    <setHeader name=\"CamelJsltString\">\n\n <constant>.</constant>\n    </setHeader>\n    <to uri=\"jslt:driverQuestionnaire\" />\n</filter>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: response ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"adjustCoverage\">\n<from uri=\"direct:adjustCoverage\" />\n<setHeader name=\"stepName\">\n    <constant>adjustCoverage</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>23</constant>\n</setHeader>\n<multicast parallelProcessing=\"true\" stopOnAggregateException=\"true\" stopOnException=\"true\" strategyMethodName=\"aggregate\" strategyRef=\"multicastStrategy\">\n    <to uri=\"direct:adjustAdditionals\" />\n    <to uri=\"direct:adjustGuarantees\" />\n</multicast>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"adjustAdditionals\">\n<from uri=\"direct:adjustAdditionals\" />\n<setHeader name=\"stepName\">\n    <constant>adjustAdditionals</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>24</constant>\n</setHeader>\n<setProperty name=\"throwException\">\n    <simple>{{THROW_ADDITIONALADJUST}}</simple>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:throwException ${exchangeProperty[throwException]}\" />\n<setProperty name=\"optionsId\">\n    <jsonpath>$.payloadTracing.steps[?(@.name == \"bestOffer\")].response..additionals[*]..options[*].id</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:optionsId ${exchangeProperty[optionsId]}\" />\n<setProperty name=\"elementsId\">\n    <jsonpath>$.payloadTracing.steps[?(@.name == \"bestOffer\")].response..additionals[?(@.indemnityLimits[*].fields[*].category.id != 3)].id</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:elementsId ${exchangeProperty[elementsId]}\" />\n<setProperty name=\"coverageCode\">\n    <jsonpath>$.payloadTracing.steps[?(@.name == \"bestOffer\")].response.body.code</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:coverageCode ${exchangeProperty[coverageCode]}\" />\n<setProperty name=\"categoryCode\">\n    <jsonpath>$.payloadTracing.steps[?(@.name == \"dataClassification\")].response.body.vehicleModel.category.code</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:categoryCode ${exchangeProperty[categoryCode]}\" />\n<setProperty name=\"productCode\">\n    <simple>${env:PRODUCT_CODE}</simple>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:productCode ${exchangeProperty[productCode]}\" />\n<setProperty name=\"calculusDate\">\n    <jsonpath>$.payloadTracing.steps[?(@.name==\"checkEntries\")]..body.calculusVersion.calculusDate</jsonpath>\n</setProperty>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:calculusDate ${exchangeProperty[calculusDate]}\" />\n<setHeader name=\"CamelHttpQuery\">\n    <simple>key=${header.key}&amp;productCode=${exchangeProperty[productCode]}&amp;calculusDate=${exchangeProperty[calculusDate]}&amp;categoryCode=${exchangeProperty[categoryCode]}&amp;coverageCode=${exchangeProperty[coverageCode]}&amp;elementsId=${exchangeProperty[optionsId]}</simple>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]:${header.CamelHttpQuery}\" />\n<setHeader name=\"codeTmp\">\n    <simple>458</simple>\n</setHeader>\n<setHeader name=\"serviceUrl\">\n    <simple>{{ADJUST_COVERAGE_ADDITIONAL_URL}}</simple>\n</setHeader>\n<to uri=\"direct:callService\" />\n<setHeader name=\"CamelJsltString\">\n    <constant>.</constant>\n</setHeader>\n<to uri=\"jslt:adjustAdditionals\" />\n<choice>\n    <when>\n\n <simple>${exchangeProperty[elementsId]} != \"\" &amp;&amp; ${exchangeProperty[elementsId]} != null</simple>\n\n <setBody>\n\n     <simple>\n\n\n  { \"responseAdjust\" : ${body}, \"listAdjustValueType\": [${exchangeProperty[elementsId]},${exchangeProperty[optionsId]}], \"coverageCode\": \"${exchangeProperty[coverageCode]}\" }\n\n     </simple>\n\n </setBody>\n    </when>\n    <otherwise>\n\n <setBody>\n\n     <simple>\n\n\n  { \"responseAdjust\" : ${body}, \"listAdjustValueType\": [${exchangeProperty[optionsId]}], \"coverageCode\": \"${exchangeProperty[coverageCode]}\" }\n\n     </simple>\n\n </setBody>\n    </otherwise>\n</choice>\n<setHeader name=\"CamelJsltString\">\n    <constant>\n\n let coverageCode = .coverageCode\n\n let putValueType = [for(.listAdjustValueType)\n\n {\n\n \"action\" : \"change\",\n\n \"attribute\" : {\n\n \"id\": .,\n\n \"field\": \"valueType\",\n\n \"value\": if($coverageCode == \"06\") \"DET\" else \"MER\"\n\n }\n\n }\n\n ]\n\n {\n\n \"specification\": {\n\n \"group\": \"additionals\",\n\n \"transforms\": flatten([$putValueType, .responseAdjust.specification.transforms])\n\n }\n\n }\n    </constant>\n</setHeader>\n<to uri=\"jslt:adjustAdditionalsFinal\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: response ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route>   <route id=\"adjustGuarantees\">\n<from uri=\"direct:adjustGuarantees\" />\n<setHeader name=\"stepName\">\n    <constant>adjustGuarantees</constant>\n</setHeader>\n<log message=\"[${header.stepName}][${header.x-trace-id}]: start ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: headersIn ${headers}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: bodyIn ${body}\" />\n<setHeader name=\"stepId\">\n    <constant>25</constant>\n</setHeader>\n<setHeader name=\"CamelJsltString\">\n    <constant>\n\n def runObject(list, keyId, key)\n\n [for($list) { \"guaranteeId\" : $keyId, \"list\" : get-key(.,$key) }]\n\n def getResponse(payloadTracing, value)\n\n [for($payloadTracing.steps) (.) if(.name == $value)]\n\n let bestOffer    = getResponse(.payloadTracing, \"bestOffer\")[0].response.body\n\n let coverage    = $bestOffer\n\n let guarantees    = $bestOffer.guarantees\n\n let modelInfo    = getResponse(.payloadTracing, \"dataClassification\")[0].response.body.vehicleModel\n\n let fields = flatten([for($guarantees) runObject(.indemnityLimits, .id, \"fields\")])\n\n let range = flatten([for($fields) runObject(.list, .guaranteeId, \"range\")])\n\n let adjust = [for($range) { \"guaranteeId\" : .guaranteeId, \"value\" : $modelInfo.isValue * (number(.list.data) / 100) } if(.list.unit.code == \"&#37;\")]\n\n let putValueType = [for($guarantees)\n\n {\n\n \"action\" : \"change\",\n\n \"attribute\" : {\n\n \"id\": .id,\n\n \"field\": \"valueType\",\n\n \"value\": if($coverage.code == \"06\") \"DET\" else \"MER\"\n\n }\n\n }\n\n ]\n\n let valueIsAdjust = [for($adjust)\n\n {\n\n \"action\": \"change\",\n\n \"attribute\": {\n\n \"id\": .guaranteeId,\n\n \"field\": \"sumInsured\",\n\n \"value\": string(.value)\n\n }\n\n }\n\n ]\n\n {\n\n \"specification\": {\n\n \"group\": \"guarantees\",\n\n \"transforms\": flatten([$putValueType, $valueIsAdjust])\n\n }\n\n }\n    </constant>\n</setHeader>\n<to uri=\"jslt:adjustGuarantees\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: response ${body}\" />\n<log message=\"[${header.stepName}][${header.x-trace-id}]: end ${date:now:yyyy-MM-dd hh:mm:ss.sss}\" />   </route></routes>"
}